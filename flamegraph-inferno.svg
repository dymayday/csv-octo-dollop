<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="374" onload="init(evt)" viewBox="0 0 1200 374" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="374" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="357.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="357.00"> </text><svg id="frames" x="10" width="1180" total_samples="7584"><g><title>&lt;f32 as core::num::dec2flt::float::RawFloat&gt;::from_u64 (24 samples, 0.32%)</title><rect x="0.0000%" y="293" width="0.3165%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="24"/><text x="0.2500%" y="303.50"></text></g><g><title>&lt;f32 as core::num::dec2flt::float::RawFloat&gt;::pow10_fast_path (7 samples, 0.09%)</title><rect x="0.3165%" y="293" width="0.0923%" height="15" fill="rgb(217,0,24)" fg:x="24" fg:w="7"/><text x="0.5665%" y="303.50"></text></g><g><title>[libc-2.33.so] (3 samples, 0.04%)</title><rect x="0.4088%" y="293" width="0.0396%" height="15" fill="rgb(221,193,54)" fg:x="31" fg:w="3"/><text x="0.6588%" y="303.50"></text></g><g><title>__GI___libc_free (181 samples, 2.39%)</title><rect x="0.4483%" y="293" width="2.3866%" height="15" fill="rgb(248,212,6)" fg:x="34" fg:w="181"/><text x="0.6983%" y="303.50">__..</text></g><g><title>__GI___libc_malloc (159 samples, 2.10%)</title><rect x="2.8349%" y="293" width="2.0965%" height="15" fill="rgb(208,68,35)" fg:x="215" fg:w="159"/><text x="3.0849%" y="303.50">_..</text></g><g><title>__GI___libc_realloc (70 samples, 0.92%)</title><rect x="4.9314%" y="293" width="0.9230%" height="15" fill="rgb(232,128,0)" fg:x="374" fg:w="70"/><text x="5.1814%" y="303.50"></text></g><g><title>entry_SYSCALL_64 (1 samples, 0.01%)</title><rect x="5.8544%" y="277" width="0.0132%" height="15" fill="rgb(207,160,47)" fg:x="444" fg:w="1"/><text x="6.1044%" y="287.50"></text></g><g><title>do_brk_flags (1 samples, 0.01%)</title><rect x="5.8676%" y="229" width="0.0132%" height="15" fill="rgb(228,23,34)" fg:x="445" fg:w="1"/><text x="6.1176%" y="239.50"></text></g><g><title>vma_merge (1 samples, 0.01%)</title><rect x="5.8676%" y="213" width="0.0132%" height="15" fill="rgb(218,30,26)" fg:x="445" fg:w="1"/><text x="6.1176%" y="223.50"></text></g><g><title>__vma_adjust (1 samples, 0.01%)</title><rect x="5.8676%" y="197" width="0.0132%" height="15" fill="rgb(220,122,19)" fg:x="445" fg:w="1"/><text x="6.1176%" y="207.50"></text></g><g><title>__brk (3 samples, 0.04%)</title><rect x="5.8544%" y="293" width="0.0396%" height="15" fill="rgb(250,228,42)" fg:x="444" fg:w="3"/><text x="6.1044%" y="303.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (2 samples, 0.03%)</title><rect x="5.8676%" y="277" width="0.0264%" height="15" fill="rgb(240,193,28)" fg:x="445" fg:w="2"/><text x="6.1176%" y="287.50"></text></g><g><title>do_syscall_64 (2 samples, 0.03%)</title><rect x="5.8676%" y="261" width="0.0264%" height="15" fill="rgb(216,20,37)" fg:x="445" fg:w="2"/><text x="6.1176%" y="271.50"></text></g><g><title>__do_sys_brk (2 samples, 0.03%)</title><rect x="5.8676%" y="245" width="0.0264%" height="15" fill="rgb(206,188,39)" fg:x="445" fg:w="2"/><text x="6.1176%" y="255.50"></text></g><g><title>find_vma (1 samples, 0.01%)</title><rect x="5.8808%" y="229" width="0.0132%" height="15" fill="rgb(217,207,13)" fg:x="446" fg:w="1"/><text x="6.1308%" y="239.50"></text></g><g><title>vmacache_find (1 samples, 0.01%)</title><rect x="5.8808%" y="213" width="0.0132%" height="15" fill="rgb(231,73,38)" fg:x="446" fg:w="1"/><text x="6.1308%" y="223.50"></text></g><g><title>__calloc (224 samples, 2.95%)</title><rect x="5.8940%" y="293" width="2.9536%" height="15" fill="rgb(225,20,46)" fg:x="447" fg:w="224"/><text x="6.1440%" y="303.50">__c..</text></g><g><title>__fdget_pos (1 samples, 0.01%)</title><rect x="8.8739%" y="229" width="0.0132%" height="15" fill="rgb(210,31,41)" fg:x="673" fg:w="1"/><text x="9.1239%" y="239.50"></text></g><g><title>__fget_light (1 samples, 0.01%)</title><rect x="8.8739%" y="213" width="0.0132%" height="15" fill="rgb(221,200,47)" fg:x="673" fg:w="1"/><text x="9.1239%" y="223.50"></text></g><g><title>__fsnotify_parent (3 samples, 0.04%)</title><rect x="8.8871%" y="213" width="0.0396%" height="15" fill="rgb(226,26,5)" fg:x="674" fg:w="3"/><text x="9.1371%" y="223.50"></text></g><g><title>f2fs_is_compress_backend_ready (1 samples, 0.01%)</title><rect x="8.9267%" y="181" width="0.0132%" height="15" fill="rgb(249,33,26)" fg:x="677" fg:w="1"/><text x="9.1767%" y="191.50"></text></g><g><title>copy_page_to_iter (28 samples, 0.37%)</title><rect x="8.9531%" y="165" width="0.3692%" height="15" fill="rgb(235,183,28)" fg:x="679" fg:w="28"/><text x="9.2031%" y="175.50"></text></g><g><title>copyout (28 samples, 0.37%)</title><rect x="8.9531%" y="149" width="0.3692%" height="15" fill="rgb(221,5,38)" fg:x="679" fg:w="28"/><text x="9.2031%" y="159.50"></text></g><g><title>copy_user_enhanced_fast_string (28 samples, 0.37%)</title><rect x="8.9531%" y="133" width="0.3692%" height="15" fill="rgb(247,18,42)" fg:x="679" fg:w="28"/><text x="9.2031%" y="143.50"></text></g><g><title>__mod_lruvec_state (1 samples, 0.01%)</title><rect x="9.4014%" y="117" width="0.0132%" height="15" fill="rgb(241,131,45)" fg:x="713" fg:w="1"/><text x="9.6514%" y="127.50"></text></g><g><title>__mod_node_page_state (1 samples, 0.01%)</title><rect x="9.4014%" y="101" width="0.0132%" height="15" fill="rgb(249,31,29)" fg:x="713" fg:w="1"/><text x="9.6514%" y="111.50"></text></g><g><title>__activate_page (9 samples, 0.12%)</title><rect x="9.3486%" y="133" width="0.1187%" height="15" fill="rgb(225,111,53)" fg:x="709" fg:w="9"/><text x="9.5986%" y="143.50"></text></g><g><title>__mod_memcg_lruvec_state (4 samples, 0.05%)</title><rect x="9.4146%" y="117" width="0.0527%" height="15" fill="rgb(238,160,17)" fg:x="714" fg:w="4"/><text x="9.6646%" y="127.50"></text></g><g><title>__mod_memcg_state.part.0 (2 samples, 0.03%)</title><rect x="9.4409%" y="101" width="0.0264%" height="15" fill="rgb(214,148,48)" fg:x="716" fg:w="2"/><text x="9.6909%" y="111.50"></text></g><g><title>__count_memcg_events.part.0 (1 samples, 0.01%)</title><rect x="9.4673%" y="133" width="0.0132%" height="15" fill="rgb(232,36,49)" fg:x="718" fg:w="1"/><text x="9.7173%" y="143.50"></text></g><g><title>mark_page_accessed (15 samples, 0.20%)</title><rect x="9.3223%" y="165" width="0.1978%" height="15" fill="rgb(209,103,24)" fg:x="707" fg:w="15"/><text x="9.5723%" y="175.50"></text></g><g><title>pagevec_lru_move_fn (13 samples, 0.17%)</title><rect x="9.3486%" y="149" width="0.1714%" height="15" fill="rgb(229,88,8)" fg:x="709" fg:w="13"/><text x="9.5986%" y="159.50"></text></g><g><title>release_pages (3 samples, 0.04%)</title><rect x="9.4805%" y="133" width="0.0396%" height="15" fill="rgb(213,181,19)" fg:x="719" fg:w="3"/><text x="9.7305%" y="143.50"></text></g><g><title>__rcu_read_lock (1 samples, 0.01%)</title><rect x="9.5992%" y="133" width="0.0132%" height="15" fill="rgb(254,191,54)" fg:x="728" fg:w="1"/><text x="9.8492%" y="143.50"></text></g><g><title>pagecache_get_page (12 samples, 0.16%)</title><rect x="9.5200%" y="165" width="0.1582%" height="15" fill="rgb(241,83,37)" fg:x="722" fg:w="12"/><text x="9.7700%" y="175.50"></text></g><g><title>find_get_entry (11 samples, 0.15%)</title><rect x="9.5332%" y="149" width="0.1450%" height="15" fill="rgb(233,36,39)" fg:x="723" fg:w="11"/><text x="9.7832%" y="159.50"></text></g><g><title>xas_load (5 samples, 0.07%)</title><rect x="9.6123%" y="133" width="0.0659%" height="15" fill="rgb(226,3,54)" fg:x="729" fg:w="5"/><text x="9.8623%" y="143.50"></text></g><g><title>xas_start (1 samples, 0.01%)</title><rect x="9.6651%" y="117" width="0.0132%" height="15" fill="rgb(245,192,40)" fg:x="733" fg:w="1"/><text x="9.9151%" y="127.50"></text></g><g><title>mem_cgroup_page_lruvec (1 samples, 0.01%)</title><rect x="9.6915%" y="149" width="0.0132%" height="15" fill="rgb(238,167,29)" fg:x="735" fg:w="1"/><text x="9.9415%" y="159.50"></text></g><g><title>do_syscall_64 (67 samples, 0.88%)</title><rect x="8.8739%" y="261" width="0.8834%" height="15" fill="rgb(232,182,51)" fg:x="673" fg:w="67"/><text x="9.1239%" y="271.50"></text></g><g><title>ksys_read (67 samples, 0.88%)</title><rect x="8.8739%" y="245" width="0.8834%" height="15" fill="rgb(231,60,39)" fg:x="673" fg:w="67"/><text x="9.1239%" y="255.50"></text></g><g><title>vfs_read (66 samples, 0.87%)</title><rect x="8.8871%" y="229" width="0.8703%" height="15" fill="rgb(208,69,12)" fg:x="674" fg:w="66"/><text x="9.1371%" y="239.50"></text></g><g><title>new_sync_read (63 samples, 0.83%)</title><rect x="8.9267%" y="213" width="0.8307%" height="15" fill="rgb(235,93,37)" fg:x="677" fg:w="63"/><text x="9.1767%" y="223.50"></text></g><g><title>f2fs_file_read_iter (63 samples, 0.83%)</title><rect x="8.9267%" y="197" width="0.8307%" height="15" fill="rgb(213,116,39)" fg:x="677" fg:w="63"/><text x="9.1767%" y="207.50"></text></g><g><title>generic_file_buffered_read (62 samples, 0.82%)</title><rect x="8.9399%" y="181" width="0.8175%" height="15" fill="rgb(222,207,29)" fg:x="678" fg:w="62"/><text x="9.1899%" y="191.50"></text></g><g><title>workingset_activation (6 samples, 0.08%)</title><rect x="9.6783%" y="165" width="0.0791%" height="15" fill="rgb(206,96,30)" fg:x="734" fg:w="6"/><text x="9.9283%" y="175.50"></text></g><g><title>workingset_age_nonresident (4 samples, 0.05%)</title><rect x="9.7046%" y="149" width="0.0527%" height="15" fill="rgb(218,138,4)" fg:x="736" fg:w="4"/><text x="9.9546%" y="159.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (83 samples, 1.09%)</title><rect x="8.8608%" y="277" width="1.0944%" height="15" fill="rgb(250,191,14)" fg:x="672" fg:w="83"/><text x="9.1108%" y="287.50"></text></g><g><title>syscall_exit_to_user_mode (15 samples, 0.20%)</title><rect x="9.7574%" y="261" width="0.1978%" height="15" fill="rgb(239,60,40)" fg:x="740" fg:w="15"/><text x="10.0074%" y="271.50"></text></g><g><title>__audit_syscall_exit (3 samples, 0.04%)</title><rect x="9.9156%" y="245" width="0.0396%" height="15" fill="rgb(206,27,48)" fg:x="752" fg:w="3"/><text x="10.1656%" y="255.50"></text></g><g><title>unroll_tree_refs (1 samples, 0.01%)</title><rect x="9.9420%" y="229" width="0.0132%" height="15" fill="rgb(225,35,8)" fg:x="754" fg:w="1"/><text x="10.1920%" y="239.50"></text></g><g><title>error_entry (1 samples, 0.01%)</title><rect x="9.9552%" y="277" width="0.0132%" height="15" fill="rgb(250,213,24)" fg:x="755" fg:w="1"/><text x="10.2052%" y="287.50"></text></g><g><title>__libc_read (94 samples, 1.24%)</title><rect x="8.8476%" y="293" width="1.2395%" height="15" fill="rgb(247,123,22)" fg:x="671" fg:w="94"/><text x="9.0976%" y="303.50"></text></g><g><title>syscall_return_via_sysret (9 samples, 0.12%)</title><rect x="9.9684%" y="277" width="0.1187%" height="15" fill="rgb(231,138,38)" fg:x="756" fg:w="9"/><text x="10.2184%" y="287.50"></text></g><g><title>__memmove_avx_unaligned_erms (208 samples, 2.74%)</title><rect x="10.0870%" y="293" width="2.7426%" height="15" fill="rgb(231,145,46)" fg:x="765" fg:w="208"/><text x="10.3370%" y="303.50">__..</text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.01%)</title><rect x="12.8165%" y="277" width="0.0132%" height="15" fill="rgb(251,118,11)" fg:x="972" fg:w="1"/><text x="13.0665%" y="287.50"></text></g><g><title>sysvec_apic_timer_interrupt (1 samples, 0.01%)</title><rect x="12.8165%" y="261" width="0.0132%" height="15" fill="rgb(217,147,25)" fg:x="972" fg:w="1"/><text x="13.0665%" y="271.50"></text></g><g><title>irq_exit_rcu (1 samples, 0.01%)</title><rect x="12.8165%" y="245" width="0.0132%" height="15" fill="rgb(247,81,37)" fg:x="972" fg:w="1"/><text x="13.0665%" y="255.50"></text></g><g><title>do_softirq_own_stack (1 samples, 0.01%)</title><rect x="12.8165%" y="229" width="0.0132%" height="15" fill="rgb(209,12,38)" fg:x="972" fg:w="1"/><text x="13.0665%" y="239.50"></text></g><g><title>asm_call_sysvec_on_stack (1 samples, 0.01%)</title><rect x="12.8165%" y="213" width="0.0132%" height="15" fill="rgb(227,1,9)" fg:x="972" fg:w="1"/><text x="13.0665%" y="223.50"></text></g><g><title>__softirqentry_text_start (1 samples, 0.01%)</title><rect x="12.8165%" y="197" width="0.0132%" height="15" fill="rgb(248,47,43)" fg:x="972" fg:w="1"/><text x="13.0665%" y="207.50"></text></g><g><title>run_rebalance_domains (1 samples, 0.01%)</title><rect x="12.8165%" y="181" width="0.0132%" height="15" fill="rgb(221,10,30)" fg:x="972" fg:w="1"/><text x="13.0665%" y="191.50"></text></g><g><title>update_blocked_averages (1 samples, 0.01%)</title><rect x="12.8165%" y="165" width="0.0132%" height="15" fill="rgb(210,229,1)" fg:x="972" fg:w="1"/><text x="13.0665%" y="175.50"></text></g><g><title>__memset_avx2_unaligned_erms (40 samples, 0.53%)</title><rect x="12.8296%" y="293" width="0.5274%" height="15" fill="rgb(222,148,37)" fg:x="973" fg:w="40"/><text x="13.0796%" y="303.50"></text></g><g><title>__rdl_alloc (18 samples, 0.24%)</title><rect x="13.3571%" y="293" width="0.2373%" height="15" fill="rgb(234,67,33)" fg:x="1013" fg:w="18"/><text x="13.6071%" y="303.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (13 samples, 0.17%)</title><rect x="13.4230%" y="277" width="0.1714%" height="15" fill="rgb(247,98,35)" fg:x="1018" fg:w="13"/><text x="13.6730%" y="287.50"></text></g><g><title>__rdl_alloc_zeroed (23 samples, 0.30%)</title><rect x="13.5944%" y="293" width="0.3033%" height="15" fill="rgb(247,138,52)" fg:x="1031" fg:w="23"/><text x="13.8444%" y="303.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc_zeroed (18 samples, 0.24%)</title><rect x="13.6603%" y="277" width="0.2373%" height="15" fill="rgb(213,79,30)" fg:x="1036" fg:w="18"/><text x="13.9103%" y="287.50"></text></g><g><title>__rdl_dealloc (18 samples, 0.24%)</title><rect x="13.8977%" y="293" width="0.2373%" height="15" fill="rgb(246,177,23)" fg:x="1054" fg:w="18"/><text x="14.1477%" y="303.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (18 samples, 0.24%)</title><rect x="13.8977%" y="277" width="0.2373%" height="15" fill="rgb(230,62,27)" fg:x="1054" fg:w="18"/><text x="14.1477%" y="287.50"></text></g><g><title>__rdl_realloc (18 samples, 0.24%)</title><rect x="14.1350%" y="293" width="0.2373%" height="15" fill="rgb(216,154,8)" fg:x="1072" fg:w="18"/><text x="14.3850%" y="303.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (11 samples, 0.15%)</title><rect x="14.2273%" y="277" width="0.1450%" height="15" fill="rgb(244,35,45)" fg:x="1079" fg:w="11"/><text x="14.4773%" y="287.50"></text></g><g><title>__rust_alloc (8 samples, 0.11%)</title><rect x="14.3724%" y="293" width="0.1055%" height="15" fill="rgb(251,115,12)" fg:x="1090" fg:w="8"/><text x="14.6224%" y="303.50"></text></g><g><title>__rust_alloc_zeroed (9 samples, 0.12%)</title><rect x="14.4778%" y="293" width="0.1187%" height="15" fill="rgb(240,54,50)" fg:x="1098" fg:w="9"/><text x="14.7278%" y="303.50"></text></g><g><title>__rust_dealloc (12 samples, 0.16%)</title><rect x="14.5965%" y="293" width="0.1582%" height="15" fill="rgb(233,84,52)" fg:x="1107" fg:w="12"/><text x="14.8465%" y="303.50"></text></g><g><title>__rust_realloc (3 samples, 0.04%)</title><rect x="14.7547%" y="293" width="0.0396%" height="15" fill="rgb(207,117,47)" fg:x="1119" fg:w="3"/><text x="15.0047%" y="303.50"></text></g><g><title>_int_free (416 samples, 5.49%)</title><rect x="14.7943%" y="293" width="5.4852%" height="15" fill="rgb(249,43,39)" fg:x="1122" fg:w="416"/><text x="15.0443%" y="303.50">_int_fr..</text></g><g><title>_raw_spin_lock (1 samples, 0.01%)</title><rect x="24.1429%" y="213" width="0.0132%" height="15" fill="rgb(209,38,44)" fg:x="1831" fg:w="1"/><text x="24.3929%" y="223.50"></text></g><g><title>__list_del_entry_valid (4 samples, 0.05%)</title><rect x="24.1825%" y="165" width="0.0527%" height="15" fill="rgb(236,212,23)" fg:x="1834" fg:w="4"/><text x="24.4325%" y="175.50"></text></g><g><title>alloc_pages_vma (10 samples, 0.13%)</title><rect x="24.1561%" y="213" width="0.1319%" height="15" fill="rgb(242,79,21)" fg:x="1832" fg:w="10"/><text x="24.4061%" y="223.50"></text></g><g><title>__alloc_pages_nodemask (9 samples, 0.12%)</title><rect x="24.1693%" y="197" width="0.1187%" height="15" fill="rgb(211,96,35)" fg:x="1833" fg:w="9"/><text x="24.4193%" y="207.50"></text></g><g><title>get_page_from_freelist (9 samples, 0.12%)</title><rect x="24.1693%" y="181" width="0.1187%" height="15" fill="rgb(253,215,40)" fg:x="1833" fg:w="9"/><text x="24.4193%" y="191.50"></text></g><g><title>prep_new_page (4 samples, 0.05%)</title><rect x="24.2352%" y="165" width="0.0527%" height="15" fill="rgb(211,81,21)" fg:x="1838" fg:w="4"/><text x="24.4852%" y="175.50"></text></g><g><title>kernel_init_free_pages (3 samples, 0.04%)</title><rect x="24.2484%" y="149" width="0.0396%" height="15" fill="rgb(208,190,38)" fg:x="1839" fg:w="3"/><text x="24.4984%" y="159.50"></text></g><g><title>clear_page_erms (3 samples, 0.04%)</title><rect x="24.2484%" y="133" width="0.0396%" height="15" fill="rgb(235,213,38)" fg:x="1839" fg:w="3"/><text x="24.4984%" y="143.50"></text></g><g><title>cgroup_throttle_swaprate (1 samples, 0.01%)</title><rect x="24.2880%" y="213" width="0.0132%" height="15" fill="rgb(237,122,38)" fg:x="1842" fg:w="1"/><text x="24.5380%" y="223.50"></text></g><g><title>__pagevec_lru_add_fn (1 samples, 0.01%)</title><rect x="24.3143%" y="181" width="0.0132%" height="15" fill="rgb(244,218,35)" fg:x="1844" fg:w="1"/><text x="24.5643%" y="191.50"></text></g><g><title>page_mapping (1 samples, 0.01%)</title><rect x="24.3143%" y="165" width="0.0132%" height="15" fill="rgb(240,68,47)" fg:x="1844" fg:w="1"/><text x="24.5643%" y="175.50"></text></g><g><title>lru_cache_add (3 samples, 0.04%)</title><rect x="24.3012%" y="213" width="0.0396%" height="15" fill="rgb(210,16,53)" fg:x="1843" fg:w="3"/><text x="24.5512%" y="223.50"></text></g><g><title>pagevec_lru_move_fn (3 samples, 0.04%)</title><rect x="24.3012%" y="197" width="0.0396%" height="15" fill="rgb(235,124,12)" fg:x="1843" fg:w="3"/><text x="24.5512%" y="207.50"></text></g><g><title>_raw_spin_unlock_irqrestore (1 samples, 0.01%)</title><rect x="24.3275%" y="181" width="0.0132%" height="15" fill="rgb(224,169,11)" fg:x="1845" fg:w="1"/><text x="24.5775%" y="191.50"></text></g><g><title>get_mem_cgroup_from_mm (3 samples, 0.04%)</title><rect x="24.3407%" y="197" width="0.0396%" height="15" fill="rgb(250,166,2)" fg:x="1846" fg:w="3"/><text x="24.5907%" y="207.50"></text></g><g><title>__rcu_read_lock (1 samples, 0.01%)</title><rect x="24.3671%" y="181" width="0.0132%" height="15" fill="rgb(242,216,29)" fg:x="1848" fg:w="1"/><text x="24.6171%" y="191.50"></text></g><g><title>mem_cgroup_charge (4 samples, 0.05%)</title><rect x="24.3407%" y="213" width="0.0527%" height="15" fill="rgb(230,116,27)" fg:x="1846" fg:w="4"/><text x="24.5907%" y="223.50"></text></g><g><title>mem_cgroup_charge_statistics.constprop.0 (1 samples, 0.01%)</title><rect x="24.3803%" y="197" width="0.0132%" height="15" fill="rgb(228,99,48)" fg:x="1849" fg:w="1"/><text x="24.6303%" y="207.50"></text></g><g><title>__count_memcg_events.part.0 (1 samples, 0.01%)</title><rect x="24.3803%" y="181" width="0.0132%" height="15" fill="rgb(253,11,6)" fg:x="1849" fg:w="1"/><text x="24.6303%" y="191.50"></text></g><g><title>mem_cgroup_from_task (1 samples, 0.01%)</title><rect x="24.3935%" y="213" width="0.0132%" height="15" fill="rgb(247,143,39)" fg:x="1850" fg:w="1"/><text x="24.6435%" y="223.50"></text></g><g><title>exc_page_fault (23 samples, 0.30%)</title><rect x="24.1166%" y="261" width="0.3033%" height="15" fill="rgb(236,97,10)" fg:x="1829" fg:w="23"/><text x="24.3666%" y="271.50"></text></g><g><title>do_user_addr_fault (23 samples, 0.30%)</title><rect x="24.1166%" y="245" width="0.3033%" height="15" fill="rgb(233,208,19)" fg:x="1829" fg:w="23"/><text x="24.3666%" y="255.50"></text></g><g><title>handle_mm_fault (23 samples, 0.30%)</title><rect x="24.1166%" y="229" width="0.3033%" height="15" fill="rgb(216,164,2)" fg:x="1829" fg:w="23"/><text x="24.3666%" y="239.50"></text></g><g><title>page_add_new_anon_rmap (1 samples, 0.01%)</title><rect x="24.4066%" y="213" width="0.0132%" height="15" fill="rgb(220,129,5)" fg:x="1851" fg:w="1"/><text x="24.6566%" y="223.50"></text></g><g><title>__mod_memcg_lruvec_state (1 samples, 0.01%)</title><rect x="24.4066%" y="197" width="0.0132%" height="15" fill="rgb(242,17,10)" fg:x="1851" fg:w="1"/><text x="24.6566%" y="207.50"></text></g><g><title>__mod_memcg_state.part.0 (1 samples, 0.01%)</title><rect x="24.4066%" y="181" width="0.0132%" height="15" fill="rgb(242,107,0)" fg:x="1851" fg:w="1"/><text x="24.6566%" y="191.50"></text></g><g><title>asm_exc_page_fault (27 samples, 0.36%)</title><rect x="24.1166%" y="277" width="0.3560%" height="15" fill="rgb(251,28,31)" fg:x="1829" fg:w="27"/><text x="24.3666%" y="287.50"></text></g><g><title>irqentry_exit_to_user_mode (4 samples, 0.05%)</title><rect x="24.4198%" y="261" width="0.0527%" height="15" fill="rgb(233,223,10)" fg:x="1852" fg:w="4"/><text x="24.6698%" y="271.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.01%)</title><rect x="24.4726%" y="277" width="0.0132%" height="15" fill="rgb(215,21,27)" fg:x="1856" fg:w="1"/><text x="24.7226%" y="287.50"></text></g><g><title>sysvec_apic_timer_interrupt (1 samples, 0.01%)</title><rect x="24.4726%" y="261" width="0.0132%" height="15" fill="rgb(232,23,21)" fg:x="1856" fg:w="1"/><text x="24.7226%" y="271.50"></text></g><g><title>__sysvec_apic_timer_interrupt (1 samples, 0.01%)</title><rect x="24.4726%" y="245" width="0.0132%" height="15" fill="rgb(244,5,23)" fg:x="1856" fg:w="1"/><text x="24.7226%" y="255.50"></text></g><g><title>hrtimer_interrupt (1 samples, 0.01%)</title><rect x="24.4726%" y="229" width="0.0132%" height="15" fill="rgb(226,81,46)" fg:x="1856" fg:w="1"/><text x="24.7226%" y="239.50"></text></g><g><title>__hrtimer_run_queues (1 samples, 0.01%)</title><rect x="24.4726%" y="213" width="0.0132%" height="15" fill="rgb(247,70,30)" fg:x="1856" fg:w="1"/><text x="24.7226%" y="223.50"></text></g><g><title>tick_sched_timer (1 samples, 0.01%)</title><rect x="24.4726%" y="197" width="0.0132%" height="15" fill="rgb(212,68,19)" fg:x="1856" fg:w="1"/><text x="24.7226%" y="207.50"></text></g><g><title>tick_sched_handle (1 samples, 0.01%)</title><rect x="24.4726%" y="181" width="0.0132%" height="15" fill="rgb(240,187,13)" fg:x="1856" fg:w="1"/><text x="24.7226%" y="191.50"></text></g><g><title>update_process_times (1 samples, 0.01%)</title><rect x="24.4726%" y="165" width="0.0132%" height="15" fill="rgb(223,113,26)" fg:x="1856" fg:w="1"/><text x="24.7226%" y="175.50"></text></g><g><title>smp_call_function_single_async (1 samples, 0.01%)</title><rect x="24.4726%" y="149" width="0.0132%" height="15" fill="rgb(206,192,2)" fg:x="1856" fg:w="1"/><text x="24.7226%" y="159.50"></text></g><g><title>generic_exec_single (1 samples, 0.01%)</title><rect x="24.4726%" y="133" width="0.0132%" height="15" fill="rgb(241,108,4)" fg:x="1856" fg:w="1"/><text x="24.7226%" y="143.50"></text></g><g><title>send_call_function_single_ipi (1 samples, 0.01%)</title><rect x="24.4726%" y="117" width="0.0132%" height="15" fill="rgb(247,173,49)" fg:x="1856" fg:w="1"/><text x="24.7226%" y="127.50"></text></g><g><title>_int_malloc (321 samples, 4.23%)</title><rect x="20.2795%" y="293" width="4.2326%" height="15" fill="rgb(224,114,35)" fg:x="1538" fg:w="321"/><text x="20.5295%" y="303.50">_int_..</text></g><g><title>entry_SYSCALL_64 (2 samples, 0.03%)</title><rect x="24.4858%" y="277" width="0.0264%" height="15" fill="rgb(245,159,27)" fg:x="1857" fg:w="2"/><text x="24.7358%" y="287.50"></text></g><g><title>_int_realloc (63 samples, 0.83%)</title><rect x="24.5121%" y="293" width="0.8307%" height="15" fill="rgb(245,172,44)" fg:x="1859" fg:w="63"/><text x="24.7621%" y="303.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,Type&gt;::borrow_mut (1 samples, 0.01%)</title><rect x="25.7252%" y="261" width="0.0132%" height="15" fill="rgb(236,23,11)" fg:x="1951" fg:w="1"/><text x="25.9752%" y="271.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (5 samples, 0.07%)</title><rect x="25.7780%" y="197" width="0.0659%" height="15" fill="rgb(205,117,38)" fg:x="1955" fg:w="5"/><text x="26.0280%" y="207.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::Internal&gt;,alloc::collections::btree::node::marker::Edge&gt;::descend (12 samples, 0.16%)</title><rect x="25.7780%" y="245" width="0.1582%" height="15" fill="rgb(237,72,25)" fg:x="1955" fg:w="12"/><text x="26.0280%" y="255.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init_read (12 samples, 0.16%)</title><rect x="25.7780%" y="229" width="0.1582%" height="15" fill="rgb(244,70,9)" fg:x="1955" fg:w="12"/><text x="26.0280%" y="239.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::read (12 samples, 0.16%)</title><rect x="25.7780%" y="213" width="0.1582%" height="15" fill="rgb(217,125,39)" fg:x="1955" fg:w="12"/><text x="26.0280%" y="223.50"></text></g><g><title>core::ptr::read (7 samples, 0.09%)</title><rect x="25.8439%" y="197" width="0.0923%" height="15" fill="rgb(235,36,10)" fg:x="1960" fg:w="7"/><text x="26.0939%" y="207.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (6 samples, 0.08%)</title><rect x="25.9362%" y="229" width="0.0791%" height="15" fill="rgb(251,123,47)" fg:x="1967" fg:w="6"/><text x="26.1862%" y="239.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;,Type&gt;::force (9 samples, 0.12%)</title><rect x="25.9362%" y="245" width="0.1187%" height="15" fill="rgb(221,13,13)" fg:x="1967" fg:w="9"/><text x="26.1862%" y="255.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::force (3 samples, 0.04%)</title><rect x="26.0153%" y="229" width="0.0396%" height="15" fill="rgb(238,131,9)" fg:x="1973" fg:w="3"/><text x="26.2653%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (42 samples, 0.55%)</title><rect x="26.5691%" y="213" width="0.5538%" height="15" fill="rgb(211,50,8)" fg:x="2015" fg:w="42"/><text x="26.8191%" y="223.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (42 samples, 0.55%)</title><rect x="26.5691%" y="197" width="0.5538%" height="15" fill="rgb(245,182,24)" fg:x="2015" fg:w="42"/><text x="26.8191%" y="207.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,Type&gt;::keys (5 samples, 0.07%)</title><rect x="27.1229%" y="213" width="0.0659%" height="15" fill="rgb(242,14,37)" fg:x="2057" fg:w="5"/><text x="27.3729%" y="223.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (250 samples, 3.30%)</title><rect x="25.3428%" y="293" width="3.2964%" height="15" fill="rgb(246,228,12)" fg:x="1922" fg:w="250"/><text x="25.5928%" y="303.50">all..</text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::entry (221 samples, 2.91%)</title><rect x="25.7252%" y="277" width="2.9140%" height="15" fill="rgb(213,55,15)" fg:x="1951" fg:w="221"/><text x="25.9752%" y="287.50">al..</text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (220 samples, 2.90%)</title><rect x="25.7384%" y="261" width="2.9008%" height="15" fill="rgb(209,9,3)" fg:x="1952" fg:w="220"/><text x="25.9884%" y="271.50">al..</text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (196 samples, 2.58%)</title><rect x="26.0549%" y="245" width="2.5844%" height="15" fill="rgb(230,59,30)" fg:x="1976" fg:w="196"/><text x="26.3049%" y="255.50">al..</text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (196 samples, 2.58%)</title><rect x="26.0549%" y="229" width="2.5844%" height="15" fill="rgb(209,121,21)" fg:x="1976" fg:w="196"/><text x="26.3049%" y="239.50">al..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for u32&gt;::cmp (110 samples, 1.45%)</title><rect x="27.1888%" y="213" width="1.4504%" height="15" fill="rgb(220,109,13)" fg:x="2062" fg:w="110"/><text x="27.4388%" y="223.50"></text></g><g><title>alloc::collections::btree::map::entry::Entry&lt;K,V&gt;::or_insert_with (8 samples, 0.11%)</title><rect x="28.6392%" y="293" width="0.1055%" height="15" fill="rgb(232,18,1)" fg:x="2172" fg:w="8"/><text x="28.8892%" y="303.50"></text></g><g><title>alloc::collections::btree::map::entry::OccupiedEntry&lt;K,V&gt;::into_mut (1 samples, 0.01%)</title><rect x="28.7315%" y="277" width="0.0132%" height="15" fill="rgb(215,41,42)" fg:x="2179" fg:w="1"/><text x="28.9815%" y="287.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::into_val_mut (1 samples, 0.01%)</title><rect x="28.7315%" y="261" width="0.0132%" height="15" fill="rgb(224,123,36)" fg:x="2179" fg:w="1"/><text x="28.9815%" y="271.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked_mut (1 samples, 0.01%)</title><rect x="28.7315%" y="245" width="0.0132%" height="15" fill="rgb(240,125,3)" fg:x="2179" fg:w="1"/><text x="28.9815%" y="255.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (1 samples, 0.01%)</title><rect x="28.7315%" y="229" width="0.0132%" height="15" fill="rgb(205,98,50)" fg:x="2179" fg:w="1"/><text x="28.9815%" y="239.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1 samples, 0.01%)</title><rect x="28.7315%" y="213" width="0.0132%" height="15" fill="rgb(205,185,37)" fg:x="2179" fg:w="1"/><text x="28.9815%" y="223.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.01%)</title><rect x="28.7315%" y="197" width="0.0132%" height="15" fill="rgb(238,207,15)" fg:x="2179" fg:w="1"/><text x="28.9815%" y="207.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V&gt;::insert (26 samples, 0.34%)</title><rect x="28.7447%" y="293" width="0.3428%" height="15" fill="rgb(213,199,42)" fg:x="2180" fg:w="26"/><text x="28.9947%" y="303.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Internal&gt;,alloc::collections::btree::node::marker::Edge&gt;::correct_parent_link (2 samples, 0.03%)</title><rect x="29.2590%" y="229" width="0.0264%" height="15" fill="rgb(235,201,11)" fg:x="2219" fg:w="2"/><text x="29.5090%" y="239.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::set_parent_link (2 samples, 0.03%)</title><rect x="29.2590%" y="213" width="0.0264%" height="15" fill="rgb(207,46,11)" fg:x="2219" fg:w="2"/><text x="29.5090%" y="223.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Internal&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert (4 samples, 0.05%)</title><rect x="29.2590%" y="277" width="0.0527%" height="15" fill="rgb(241,35,35)" fg:x="2219" fg:w="4"/><text x="29.5090%" y="287.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Internal&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_fit (4 samples, 0.05%)</title><rect x="29.2590%" y="261" width="0.0527%" height="15" fill="rgb(243,32,47)" fg:x="2219" fg:w="4"/><text x="29.5090%" y="271.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Internal&gt;::correct_childrens_parent_links (4 samples, 0.05%)</title><rect x="29.2590%" y="245" width="0.0527%" height="15" fill="rgb(247,202,23)" fg:x="2219" fg:w="4"/><text x="29.5090%" y="255.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (2 samples, 0.03%)</title><rect x="29.2853%" y="229" width="0.0264%" height="15" fill="rgb(219,102,11)" fg:x="2221" fg:w="2"/><text x="29.5353%" y="239.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (2 samples, 0.03%)</title><rect x="29.2853%" y="213" width="0.0264%" height="15" fill="rgb(243,110,44)" fg:x="2221" fg:w="2"/><text x="29.5353%" y="223.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::write (2 samples, 0.03%)</title><rect x="29.3381%" y="229" width="0.0264%" height="15" fill="rgb(222,74,54)" fg:x="2225" fg:w="2"/><text x="29.5881%" y="239.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_fit (4 samples, 0.05%)</title><rect x="29.3249%" y="261" width="0.0527%" height="15" fill="rgb(216,99,12)" fg:x="2224" fg:w="4"/><text x="29.5749%" y="271.50"></text></g><g><title>alloc::collections::btree::node::slice_insert (4 samples, 0.05%)</title><rect x="29.3249%" y="245" width="0.0527%" height="15" fill="rgb(226,22,26)" fg:x="2224" fg:w="4"/><text x="29.5749%" y="255.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1 samples, 0.01%)</title><rect x="29.3645%" y="229" width="0.0132%" height="15" fill="rgb(217,163,10)" fg:x="2227" fg:w="1"/><text x="29.6145%" y="239.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.01%)</title><rect x="29.3645%" y="213" width="0.0132%" height="15" fill="rgb(213,25,53)" fg:x="2227" fg:w="1"/><text x="29.6145%" y="223.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;::len (1 samples, 0.01%)</title><rect x="29.4040%" y="229" width="0.0132%" height="15" fill="rgb(252,105,26)" fg:x="2230" fg:w="1"/><text x="29.6540%" y="239.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::split_leaf_data (4 samples, 0.05%)</title><rect x="29.3776%" y="245" width="0.0527%" height="15" fill="rgb(220,39,43)" fg:x="2228" fg:w="4"/><text x="29.6276%" y="255.50"></text></g><g><title>alloc::collections::btree::node::move_to_slice (1 samples, 0.01%)</title><rect x="29.4172%" y="229" width="0.0132%" height="15" fill="rgb(229,68,48)" fg:x="2231" fg:w="1"/><text x="29.6672%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.01%)</title><rect x="29.4172%" y="213" width="0.0132%" height="15" fill="rgb(252,8,32)" fg:x="2231" fg:w="1"/><text x="29.6672%" y="223.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::KV&gt;::split (5 samples, 0.07%)</title><rect x="29.3776%" y="261" width="0.0659%" height="15" fill="rgb(223,20,43)" fg:x="2228" fg:w="5"/><text x="29.6276%" y="271.50"></text></g><g><title>alloc::collections::btree::node::LeafNode&lt;K,V&gt;::new (1 samples, 0.01%)</title><rect x="29.4304%" y="245" width="0.0132%" height="15" fill="rgb(229,81,49)" fg:x="2232" fg:w="1"/><text x="29.6804%" y="255.50"></text></g><g><title>alloc::collections::btree::node::LeafNode&lt;K,V&gt;::init (1 samples, 0.01%)</title><rect x="29.4304%" y="229" width="0.0132%" height="15" fill="rgb(236,28,36)" fg:x="2232" fg:w="1"/><text x="29.6804%" y="239.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (1 samples, 0.01%)</title><rect x="29.4304%" y="213" width="0.0132%" height="15" fill="rgb(249,185,26)" fg:x="2232" fg:w="1"/><text x="29.6804%" y="223.50"></text></g><g><title>core::ptr::write (1 samples, 0.01%)</title><rect x="29.4304%" y="197" width="0.0132%" height="15" fill="rgb(249,174,33)" fg:x="2232" fg:w="1"/><text x="29.6804%" y="207.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert (21 samples, 0.28%)</title><rect x="29.3117%" y="277" width="0.2769%" height="15" fill="rgb(233,201,37)" fg:x="2223" fg:w="21"/><text x="29.5617%" y="287.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;::len (11 samples, 0.15%)</title><rect x="29.4436%" y="261" width="0.1450%" height="15" fill="rgb(221,78,26)" fg:x="2233" fg:w="11"/><text x="29.6936%" y="271.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (39 samples, 0.51%)</title><rect x="29.0876%" y="293" width="0.5142%" height="15" fill="rgb(250,127,30)" fg:x="2206" fg:w="39"/><text x="29.3376%" y="303.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;::ascend (1 samples, 0.01%)</title><rect x="29.5886%" y="277" width="0.0132%" height="15" fill="rgb(230,49,44)" fg:x="2244" fg:w="1"/><text x="29.8386%" y="287.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (16 samples, 0.21%)</title><rect x="29.7336%" y="261" width="0.2110%" height="15" fill="rgb(229,67,23)" fg:x="2255" fg:w="16"/><text x="29.9836%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (4 samples, 0.05%)</title><rect x="29.9446%" y="261" width="0.0527%" height="15" fill="rgb(249,83,47)" fg:x="2271" fg:w="4"/><text x="30.1946%" y="271.50"></text></g><g><title>core::cmp::max (5 samples, 0.07%)</title><rect x="29.9974%" y="261" width="0.0659%" height="15" fill="rgb(215,43,3)" fg:x="2275" fg:w="5"/><text x="30.2474%" y="271.50"></text></g><g><title>core::cmp::Ord::max (5 samples, 0.07%)</title><rect x="29.9974%" y="245" width="0.0659%" height="15" fill="rgb(238,154,13)" fg:x="2275" fg:w="5"/><text x="30.2474%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (5 samples, 0.07%)</title><rect x="29.9974%" y="229" width="0.0659%" height="15" fill="rgb(219,56,2)" fg:x="2275" fg:w="5"/><text x="30.2474%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (33 samples, 0.44%)</title><rect x="29.6677%" y="277" width="0.4351%" height="15" fill="rgb(233,0,4)" fg:x="2250" fg:w="33"/><text x="29.9177%" y="287.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (3 samples, 0.04%)</title><rect x="30.0633%" y="261" width="0.0396%" height="15" fill="rgb(235,30,7)" fg:x="2280" fg:w="3"/><text x="30.3133%" y="271.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (3 samples, 0.04%)</title><rect x="30.0633%" y="245" width="0.0396%" height="15" fill="rgb(250,79,13)" fg:x="2280" fg:w="3"/><text x="30.3133%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (44 samples, 0.58%)</title><rect x="29.6018%" y="293" width="0.5802%" height="15" fill="rgb(211,146,34)" fg:x="2245" fg:w="44"/><text x="29.8518%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (6 samples, 0.08%)</title><rect x="30.1028%" y="277" width="0.0791%" height="15" fill="rgb(228,22,38)" fg:x="2283" fg:w="6"/><text x="30.3528%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (6 samples, 0.08%)</title><rect x="30.5512%" y="277" width="0.0791%" height="15" fill="rgb(235,168,5)" fg:x="2317" fg:w="6"/><text x="30.8012%" y="287.50"></text></g><g><title>alloc::alloc::Global::grow_impl (6 samples, 0.08%)</title><rect x="30.5512%" y="261" width="0.0791%" height="15" fill="rgb(221,155,16)" fg:x="2317" fg:w="6"/><text x="30.8012%" y="271.50"></text></g><g><title>alloc::alloc::realloc (4 samples, 0.05%)</title><rect x="30.5775%" y="245" width="0.0527%" height="15" fill="rgb(215,215,53)" fg:x="2319" fg:w="4"/><text x="30.8275%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (49 samples, 0.65%)</title><rect x="30.1820%" y="293" width="0.6461%" height="15" fill="rgb(223,4,10)" fg:x="2289" fg:w="49"/><text x="30.4320%" y="303.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (15 samples, 0.20%)</title><rect x="30.6303%" y="277" width="0.1978%" height="15" fill="rgb(234,103,6)" fg:x="2323" fg:w="15"/><text x="30.8803%" y="287.50"></text></g><g><title>asm_exc_page_fault (8 samples, 0.11%)</title><rect x="30.8281%" y="293" width="0.1055%" height="15" fill="rgb(227,97,0)" fg:x="2338" fg:w="8"/><text x="31.0781%" y="303.50"></text></g><g><title>&lt;bstr::unicode::fsm::whitespace_anchored_fwd::WHITESPACE_ANCHORED_FWD as core::ops::deref::Deref&gt;::deref (19 samples, 0.25%)</title><rect x="32.1466%" y="277" width="0.2505%" height="15" fill="rgb(234,150,53)" fg:x="2438" fg:w="19"/><text x="32.3966%" y="287.50"></text></g><g><title>&lt;bstr::unicode::fsm::whitespace_anchored_fwd::WHITESPACE_ANCHORED_FWD as core::ops::deref::Deref&gt;::deref::__stability (19 samples, 0.25%)</title><rect x="32.1466%" y="261" width="0.2505%" height="15" fill="rgb(228,201,54)" fg:x="2438" fg:w="19"/><text x="32.3966%" y="271.50"></text></g><g><title>lazy_static::lazy::Lazy&lt;T&gt;::get (19 samples, 0.25%)</title><rect x="32.1466%" y="245" width="0.2505%" height="15" fill="rgb(222,22,37)" fg:x="2438" fg:w="19"/><text x="32.3966%" y="255.50"></text></g><g><title>std::sync::once::Once::call_once (16 samples, 0.21%)</title><rect x="32.1862%" y="229" width="0.2110%" height="15" fill="rgb(237,53,32)" fg:x="2441" fg:w="16"/><text x="32.4362%" y="239.50"></text></g><g><title>std::sync::once::Once::is_completed (16 samples, 0.21%)</title><rect x="32.1862%" y="213" width="0.2110%" height="15" fill="rgb(233,25,53)" fg:x="2441" fg:w="16"/><text x="32.4362%" y="223.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (12 samples, 0.16%)</title><rect x="32.2389%" y="197" width="0.1582%" height="15" fill="rgb(210,40,34)" fg:x="2445" fg:w="12"/><text x="32.4889%" y="207.50"></text></g><g><title>core::sync::atomic::atomic_load (12 samples, 0.16%)</title><rect x="32.2389%" y="181" width="0.1582%" height="15" fill="rgb(241,220,44)" fg:x="2445" fg:w="12"/><text x="32.4889%" y="191.50"></text></g><g><title>bstr::unicode::whitespace::whitespace_len_fwd (51 samples, 0.67%)</title><rect x="33.6366%" y="245" width="0.6725%" height="15" fill="rgb(235,28,35)" fg:x="2551" fg:w="51"/><text x="33.8866%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.01%)</title><rect x="34.3618%" y="229" width="0.0132%" height="15" fill="rgb(210,56,17)" fg:x="2606" fg:w="1"/><text x="34.6118%" y="239.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.01%)</title><rect x="34.3618%" y="213" width="0.0132%" height="15" fill="rgb(224,130,29)" fg:x="2606" fg:w="1"/><text x="34.6118%" y="223.50"></text></g><g><title>bstr::unicode::whitespace::whitespace_len_fwd (2 samples, 0.03%)</title><rect x="34.3750%" y="197" width="0.0264%" height="15" fill="rgb(235,212,8)" fg:x="2607" fg:w="2"/><text x="34.6250%" y="207.50"></text></g><g><title>&lt;regex_automata::dense_imp::PremultipliedByteClass&lt;T,S&gt; as regex_automata::dfa::DFA&gt;::is_dead_state (12 samples, 0.16%)</title><rect x="34.3750%" y="229" width="0.1582%" height="15" fill="rgb(223,33,50)" fg:x="2607" fg:w="12"/><text x="34.6250%" y="239.50"></text></g><g><title>regex_automata::dense_imp::Repr&lt;T,S&gt;::is_dead_state (12 samples, 0.16%)</title><rect x="34.3750%" y="213" width="0.1582%" height="15" fill="rgb(219,149,13)" fg:x="2607" fg:w="12"/><text x="34.6250%" y="223.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u8&gt;::eq (10 samples, 0.13%)</title><rect x="34.4014%" y="197" width="0.1319%" height="15" fill="rgb(250,156,29)" fg:x="2609" fg:w="10"/><text x="34.6514%" y="207.50"></text></g><g><title>&lt;regex_automata::dense_imp::PremultipliedByteClass&lt;T,S&gt; as regex_automata::dfa::DFA&gt;::is_match_or_dead_state (3 samples, 0.04%)</title><rect x="34.5332%" y="229" width="0.0396%" height="15" fill="rgb(216,193,19)" fg:x="2619" fg:w="3"/><text x="34.7832%" y="239.50"></text></g><g><title>regex_automata::dense_imp::Repr&lt;T,S&gt;::is_match_or_dead_state (3 samples, 0.04%)</title><rect x="34.5332%" y="213" width="0.0396%" height="15" fill="rgb(216,135,14)" fg:x="2619" fg:w="3"/><text x="34.7832%" y="223.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for u8&gt;::le (3 samples, 0.04%)</title><rect x="34.5332%" y="197" width="0.0396%" height="15" fill="rgb(241,47,5)" fg:x="2619" fg:w="3"/><text x="34.7832%" y="207.50"></text></g><g><title>&lt;regex_automata::dense_imp::PremultipliedByteClass&lt;T,S&gt; as regex_automata::dfa::DFA&gt;::is_match_state (24 samples, 0.32%)</title><rect x="34.5728%" y="229" width="0.3165%" height="15" fill="rgb(233,42,35)" fg:x="2622" fg:w="24"/><text x="34.8228%" y="239.50"></text></g><g><title>regex_automata::dense_imp::Repr&lt;T,S&gt;::is_match_state (24 samples, 0.32%)</title><rect x="34.5728%" y="213" width="0.3165%" height="15" fill="rgb(231,13,6)" fg:x="2622" fg:w="24"/><text x="34.8228%" y="223.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for u8&gt;::le (24 samples, 0.32%)</title><rect x="34.5728%" y="197" width="0.3165%" height="15" fill="rgb(207,181,40)" fg:x="2622" fg:w="24"/><text x="34.8228%" y="207.50"></text></g><g><title>&lt;u8 as regex_automata::state_id::StateID&gt;::to_usize (1 samples, 0.01%)</title><rect x="35.2584%" y="213" width="0.0132%" height="15" fill="rgb(254,173,49)" fg:x="2674" fg:w="1"/><text x="35.5084%" y="223.50"></text></g><g><title>&lt;regex_automata::dense_imp::PremultipliedByteClass&lt;T,S&gt; as regex_automata::dfa::DFA&gt;::next_state_unchecked (30 samples, 0.40%)</title><rect x="34.8892%" y="229" width="0.3956%" height="15" fill="rgb(221,1,38)" fg:x="2646" fg:w="30"/><text x="35.1392%" y="239.50"></text></g><g><title>regex_automata::classes::ByteClasses::get_unchecked (1 samples, 0.01%)</title><rect x="35.2716%" y="213" width="0.0132%" height="15" fill="rgb(206,124,46)" fg:x="2675" fg:w="1"/><text x="35.5216%" y="223.50"></text></g><g><title>bstr::unicode::whitespace::whitespace_len_fwd (335 samples, 4.42%)</title><rect x="30.9335%" y="293" width="4.4172%" height="15" fill="rgb(249,21,11)" fg:x="2346" fg:w="335"/><text x="31.1835%" y="303.50">bstr:..</text></g><g><title>regex_automata::dfa::DFA::find (224 samples, 2.95%)</title><rect x="32.3972%" y="277" width="2.9536%" height="15" fill="rgb(222,201,40)" fg:x="2457" fg:w="224"/><text x="32.6472%" y="287.50">reg..</text></g><g><title>&lt;regex_automata::dense_imp::DenseDFA&lt;T,S&gt; as regex_automata::dfa::DFA&gt;::find_at (224 samples, 2.95%)</title><rect x="32.3972%" y="261" width="2.9536%" height="15" fill="rgb(235,61,29)" fg:x="2457" fg:w="224"/><text x="32.6472%" y="271.50">&lt;re..</text></g><g><title>regex_automata::dfa::DFA::find_at (79 samples, 1.04%)</title><rect x="34.3091%" y="245" width="1.0417%" height="15" fill="rgb(219,207,3)" fg:x="2602" fg:w="79"/><text x="34.5591%" y="255.50"></text></g><g><title>&lt;regex_automata::dense_imp::PremultipliedByteClass&lt;T,S&gt; as regex_automata::dfa::DFA&gt;::start_state (5 samples, 0.07%)</title><rect x="35.2848%" y="229" width="0.0659%" height="15" fill="rgb(222,56,46)" fg:x="2676" fg:w="5"/><text x="35.5348%" y="239.50"></text></g><g><title>regex_automata::dense_imp::Repr&lt;T,S&gt;::start_state (5 samples, 0.07%)</title><rect x="35.2848%" y="213" width="0.0659%" height="15" fill="rgb(239,76,54)" fg:x="2676" fg:w="5"/><text x="35.5348%" y="223.50"></text></g><g><title>&lt;bstr::unicode::fsm::whitespace_anchored_rev::WHITESPACE_ANCHORED_REV as core::ops::deref::Deref&gt;::deref (26 samples, 0.34%)</title><rect x="35.9968%" y="277" width="0.3428%" height="15" fill="rgb(231,124,27)" fg:x="2730" fg:w="26"/><text x="36.2468%" y="287.50"></text></g><g><title>&lt;bstr::unicode::fsm::whitespace_anchored_rev::WHITESPACE_ANCHORED_REV as core::ops::deref::Deref&gt;::deref::__stability (26 samples, 0.34%)</title><rect x="35.9968%" y="261" width="0.3428%" height="15" fill="rgb(249,195,6)" fg:x="2730" fg:w="26"/><text x="36.2468%" y="271.50"></text></g><g><title>lazy_static::lazy::Lazy&lt;T&gt;::get (26 samples, 0.34%)</title><rect x="35.9968%" y="245" width="0.3428%" height="15" fill="rgb(237,174,47)" fg:x="2730" fg:w="26"/><text x="36.2468%" y="255.50"></text></g><g><title>std::sync::once::Once::call_once (18 samples, 0.24%)</title><rect x="36.1023%" y="229" width="0.2373%" height="15" fill="rgb(206,201,31)" fg:x="2738" fg:w="18"/><text x="36.3523%" y="239.50"></text></g><g><title>std::sync::once::Once::is_completed (18 samples, 0.24%)</title><rect x="36.1023%" y="213" width="0.2373%" height="15" fill="rgb(231,57,52)" fg:x="2738" fg:w="18"/><text x="36.3523%" y="223.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (2 samples, 0.03%)</title><rect x="36.3133%" y="197" width="0.0264%" height="15" fill="rgb(248,177,22)" fg:x="2754" fg:w="2"/><text x="36.5633%" y="207.50"></text></g><g><title>core::sync::atomic::atomic_load (2 samples, 0.03%)</title><rect x="36.3133%" y="181" width="0.0264%" height="15" fill="rgb(215,211,37)" fg:x="2754" fg:w="2"/><text x="36.5633%" y="191.50"></text></g><g><title>&lt;regex_automata::dense_imp::DenseDFA&lt;T,S&gt; as regex_automata::dfa::DFA&gt;::rfind_at (75 samples, 0.99%)</title><rect x="36.3397%" y="261" width="0.9889%" height="15" fill="rgb(241,128,51)" fg:x="2756" fg:w="75"/><text x="36.5897%" y="271.50"></text></g><g><title>bstr::unicode::whitespace::whitespace_len_rev (171 samples, 2.25%)</title><rect x="35.3507%" y="293" width="2.2547%" height="15" fill="rgb(227,165,31)" fg:x="2681" fg:w="171"/><text x="35.6007%" y="303.50">b..</text></g><g><title>regex_automata::dfa::DFA::rfind (96 samples, 1.27%)</title><rect x="36.3397%" y="277" width="1.2658%" height="15" fill="rgb(228,167,24)" fg:x="2756" fg:w="96"/><text x="36.5897%" y="287.50"></text></g><g><title>bstr::unicode::whitespace::whitespace_len_rev (21 samples, 0.28%)</title><rect x="37.3286%" y="261" width="0.2769%" height="15" fill="rgb(228,143,12)" fg:x="2831" fg:w="21"/><text x="37.5786%" y="271.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.01%)</title><rect x="37.5923%" y="245" width="0.0132%" height="15" fill="rgb(249,149,8)" fg:x="2851" fg:w="1"/><text x="37.8423%" y="255.50"></text></g><g><title>sysvec_apic_timer_interrupt (1 samples, 0.01%)</title><rect x="37.5923%" y="229" width="0.0132%" height="15" fill="rgb(243,35,44)" fg:x="2851" fg:w="1"/><text x="37.8423%" y="239.50"></text></g><g><title>__sysvec_apic_timer_interrupt (1 samples, 0.01%)</title><rect x="37.5923%" y="213" width="0.0132%" height="15" fill="rgb(246,89,9)" fg:x="2851" fg:w="1"/><text x="37.8423%" y="223.50"></text></g><g><title>hrtimer_interrupt (1 samples, 0.01%)</title><rect x="37.5923%" y="197" width="0.0132%" height="15" fill="rgb(233,213,13)" fg:x="2851" fg:w="1"/><text x="37.8423%" y="207.50"></text></g><g><title>__hrtimer_run_queues (1 samples, 0.01%)</title><rect x="37.5923%" y="181" width="0.0132%" height="15" fill="rgb(233,141,41)" fg:x="2851" fg:w="1"/><text x="37.8423%" y="191.50"></text></g><g><title>tick_sched_timer (1 samples, 0.01%)</title><rect x="37.5923%" y="165" width="0.0132%" height="15" fill="rgb(239,167,4)" fg:x="2851" fg:w="1"/><text x="37.8423%" y="175.50"></text></g><g><title>timekeeping_advance (1 samples, 0.01%)</title><rect x="37.5923%" y="149" width="0.0132%" height="15" fill="rgb(209,217,16)" fg:x="2851" fg:w="1"/><text x="37.8423%" y="159.50"></text></g><g><title>timekeeping_update (1 samples, 0.01%)</title><rect x="37.5923%" y="133" width="0.0132%" height="15" fill="rgb(219,88,35)" fg:x="2851" fg:w="1"/><text x="37.8423%" y="143.50"></text></g><g><title>update_fast_timekeeper (1 samples, 0.01%)</title><rect x="37.5923%" y="117" width="0.0132%" height="15" fill="rgb(220,193,23)" fg:x="2851" fg:w="1"/><text x="37.8423%" y="127.50"></text></g><g><title>core::num::&lt;impl core::str::traits::FromStr for u16&gt;::from_str (9 samples, 0.12%)</title><rect x="37.6846%" y="277" width="0.1187%" height="15" fill="rgb(230,90,52)" fg:x="2858" fg:w="9"/><text x="37.9346%" y="287.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.08%)</title><rect x="38.2780%" y="261" width="0.0791%" height="15" fill="rgb(252,106,19)" fg:x="2903" fg:w="6"/><text x="38.5280%" y="271.50"></text></g><g><title>&lt;u16 as core::num::FromStrRadixHelper&gt;::checked_mul (11 samples, 0.15%)</title><rect x="38.3571%" y="261" width="0.1450%" height="15" fill="rgb(206,74,20)" fg:x="2909" fg:w="11"/><text x="38.6071%" y="271.50"></text></g><g><title>core::num::&lt;impl u16&gt;::checked_mul (11 samples, 0.15%)</title><rect x="38.3571%" y="245" width="0.1450%" height="15" fill="rgb(230,138,44)" fg:x="2909" fg:w="11"/><text x="38.6071%" y="255.50"></text></g><g><title>core::num::&lt;impl u16&gt;::overflowing_mul (11 samples, 0.15%)</title><rect x="38.3571%" y="229" width="0.1450%" height="15" fill="rgb(235,182,43)" fg:x="2909" fg:w="11"/><text x="38.6071%" y="239.50"></text></g><g><title>core::num::&lt;impl core::str::traits::FromStr for u16&gt;::from_str (83 samples, 1.09%)</title><rect x="37.6055%" y="293" width="1.0944%" height="15" fill="rgb(242,16,51)" fg:x="2852" fg:w="83"/><text x="37.8555%" y="303.50"></text></g><g><title>core::num::from_str_radix (68 samples, 0.90%)</title><rect x="37.8033%" y="277" width="0.8966%" height="15" fill="rgb(248,9,4)" fg:x="2867" fg:w="68"/><text x="38.0533%" y="287.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::to_digit (15 samples, 0.20%)</title><rect x="38.5021%" y="261" width="0.1978%" height="15" fill="rgb(210,31,22)" fg:x="2920" fg:w="15"/><text x="38.7521%" y="271.50"></text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_sub (11 samples, 0.15%)</title><rect x="38.5549%" y="245" width="0.1450%" height="15" fill="rgb(239,54,39)" fg:x="2924" fg:w="11"/><text x="38.8049%" y="255.50"></text></g><g><title>core::num::&lt;impl core::str::traits::FromStr for u32&gt;::from_str (23 samples, 0.30%)</title><rect x="38.7526%" y="277" width="0.3033%" height="15" fill="rgb(230,99,41)" fg:x="2939" fg:w="23"/><text x="39.0026%" y="287.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.05%)</title><rect x="40.4140%" y="261" width="0.0527%" height="15" fill="rgb(253,106,12)" fg:x="3065" fg:w="4"/><text x="40.6640%" y="271.50"></text></g><g><title>&lt;u32 as core::num::FromStrRadixHelper&gt;::checked_mul (57 samples, 0.75%)</title><rect x="40.4668%" y="261" width="0.7516%" height="15" fill="rgb(213,46,41)" fg:x="3069" fg:w="57"/><text x="40.7168%" y="271.50"></text></g><g><title>core::num::&lt;impl u32&gt;::checked_mul (57 samples, 0.75%)</title><rect x="40.4668%" y="245" width="0.7516%" height="15" fill="rgb(215,133,35)" fg:x="3069" fg:w="57"/><text x="40.7168%" y="255.50"></text></g><g><title>core::num::&lt;impl u32&gt;::overflowing_mul (57 samples, 0.75%)</title><rect x="40.4668%" y="229" width="0.7516%" height="15" fill="rgb(213,28,5)" fg:x="3069" fg:w="57"/><text x="40.7168%" y="239.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::to_digit (12 samples, 0.16%)</title><rect x="41.2184%" y="261" width="0.1582%" height="15" fill="rgb(215,77,49)" fg:x="3126" fg:w="12"/><text x="41.4684%" y="271.50"></text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_sub (6 samples, 0.08%)</title><rect x="41.2975%" y="245" width="0.0791%" height="15" fill="rgb(248,100,22)" fg:x="3132" fg:w="6"/><text x="41.5475%" y="255.50"></text></g><g><title>core::num::&lt;impl core::str::traits::FromStr for u32&gt;::from_str (204 samples, 2.69%)</title><rect x="38.6999%" y="293" width="2.6899%" height="15" fill="rgb(208,67,9)" fg:x="2935" fg:w="204"/><text x="38.9499%" y="303.50">co..</text></g><g><title>core::num::from_str_radix (177 samples, 2.33%)</title><rect x="39.0559%" y="277" width="2.3339%" height="15" fill="rgb(219,133,21)" fg:x="2962" fg:w="177"/><text x="39.3059%" y="287.50">c..</text></g><g><title>core::str::&lt;impl str&gt;::is_empty (1 samples, 0.01%)</title><rect x="41.3766%" y="261" width="0.0132%" height="15" fill="rgb(246,46,29)" fg:x="3138" fg:w="1"/><text x="41.6266%" y="271.50"></text></g><g><title>&lt;f32 as core::ops::arith::Div&gt;::div (49 samples, 0.65%)</title><rect x="42.0359%" y="277" width="0.6461%" height="15" fill="rgb(246,185,52)" fg:x="3188" fg:w="49"/><text x="42.2859%" y="287.50"></text></g><g><title>core::num::dec2flt::number::Number::try_fast_path (104 samples, 1.37%)</title><rect x="41.3898%" y="293" width="1.3713%" height="15" fill="rgb(252,136,11)" fg:x="3139" fg:w="104"/><text x="41.6398%" y="303.50"></text></g><g><title>core::num::dec2flt::number::Number::is_fast_path (6 samples, 0.08%)</title><rect x="42.6820%" y="277" width="0.0791%" height="15" fill="rgb(219,138,53)" fg:x="3237" fg:w="6"/><text x="42.9320%" y="287.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (12 samples, 0.16%)</title><rect x="43.4599%" y="277" width="0.1582%" height="15" fill="rgb(211,51,23)" fg:x="3296" fg:w="12"/><text x="43.7099%" y="287.50"></text></g><g><title>core::num::dec2flt::common::AsciiStr::step (3 samples, 0.04%)</title><rect x="43.8555%" y="261" width="0.0396%" height="15" fill="rgb(247,221,28)" fg:x="3326" fg:w="3"/><text x="44.1055%" y="271.50"></text></g><g><title>core::num::dec2flt::common::AsciiStr::step_by (3 samples, 0.04%)</title><rect x="43.8555%" y="245" width="0.0396%" height="15" fill="rgb(251,222,45)" fg:x="3326" fg:w="3"/><text x="44.1055%" y="255.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (3 samples, 0.04%)</title><rect x="43.8555%" y="229" width="0.0396%" height="15" fill="rgb(217,162,53)" fg:x="3326" fg:w="3"/><text x="44.1055%" y="239.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (3 samples, 0.04%)</title><rect x="43.8555%" y="213" width="0.0396%" height="15" fill="rgb(229,93,14)" fg:x="3326" fg:w="3"/><text x="44.1055%" y="223.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (3 samples, 0.04%)</title><rect x="43.8555%" y="197" width="0.0396%" height="15" fill="rgb(209,67,49)" fg:x="3326" fg:w="3"/><text x="44.1055%" y="207.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (1 samples, 0.01%)</title><rect x="43.8819%" y="181" width="0.0132%" height="15" fill="rgb(213,87,29)" fg:x="3328" fg:w="1"/><text x="44.1319%" y="191.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (1 samples, 0.01%)</title><rect x="43.8819%" y="165" width="0.0132%" height="15" fill="rgb(205,151,52)" fg:x="3328" fg:w="1"/><text x="44.1319%" y="175.50"></text></g><g><title>core::num::dec2flt::common::ByteSlice::first_is2 (1 samples, 0.01%)</title><rect x="43.8950%" y="261" width="0.0132%" height="15" fill="rgb(253,215,39)" fg:x="3329" fg:w="1"/><text x="44.1450%" y="271.50"></text></g><g><title>core::num::dec2flt::common::ByteSlice::offset_from (10 samples, 0.13%)</title><rect x="43.9082%" y="261" width="0.1319%" height="15" fill="rgb(221,220,41)" fg:x="3330" fg:w="10"/><text x="44.1582%" y="271.50"></text></g><g><title>core::num::&lt;impl u8&gt;::wrapping_sub (9 samples, 0.12%)</title><rect x="44.2774%" y="229" width="0.1187%" height="15" fill="rgb(218,133,21)" fg:x="3358" fg:w="9"/><text x="44.5274%" y="239.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (4 samples, 0.05%)</title><rect x="44.4093%" y="213" width="0.0527%" height="15" fill="rgb(221,193,43)" fg:x="3368" fg:w="4"/><text x="44.6593%" y="223.50"></text></g><g><title>core::num::dec2flt::parse::try_parse_digits::{{closure}} (14 samples, 0.18%)</title><rect x="44.3961%" y="229" width="0.1846%" height="15" fill="rgb(240,128,52)" fg:x="3367" fg:w="14"/><text x="44.6461%" y="239.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (9 samples, 0.12%)</title><rect x="44.4620%" y="213" width="0.1187%" height="15" fill="rgb(253,114,12)" fg:x="3372" fg:w="9"/><text x="44.7120%" y="223.50"></text></g><g><title>core::num::dec2flt::common::AsciiStr::parse_digits (49 samples, 0.65%)</title><rect x="44.0401%" y="245" width="0.6461%" height="15" fill="rgb(215,223,47)" fg:x="3340" fg:w="49"/><text x="44.2901%" y="255.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::first (8 samples, 0.11%)</title><rect x="44.5807%" y="229" width="0.1055%" height="15" fill="rgb(248,225,23)" fg:x="3381" fg:w="8"/><text x="44.8307%" y="239.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (147 samples, 1.94%)</title><rect x="42.7611%" y="293" width="1.9383%" height="15" fill="rgb(250,108,0)" fg:x="3243" fg:w="147"/><text x="43.0111%" y="303.50">c..</text></g><g><title>core::num::dec2flt::parse::parse_partial_number (82 samples, 1.08%)</title><rect x="43.6181%" y="277" width="1.0812%" height="15" fill="rgb(228,208,7)" fg:x="3308" fg:w="82"/><text x="43.8681%" y="287.50"></text></g><g><title>core::num::dec2flt::parse::try_parse_digits (50 samples, 0.66%)</title><rect x="44.0401%" y="261" width="0.6593%" height="15" fill="rgb(244,45,10)" fg:x="3340" fg:w="50"/><text x="44.2901%" y="271.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (1 samples, 0.01%)</title><rect x="44.6862%" y="245" width="0.0132%" height="15" fill="rgb(207,125,25)" fg:x="3389" fg:w="1"/><text x="44.9362%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::result::Result&lt;(),k_coding_test::engine::error::EngineError&gt;&gt; (27 samples, 0.36%)</title><rect x="44.6994%" y="293" width="0.3560%" height="15" fill="rgb(210,195,18)" fg:x="3390" fg:w="27"/><text x="44.9494%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;k_coding_test::engine::error::EngineError&gt; (3 samples, 0.04%)</title><rect x="45.0158%" y="277" width="0.0396%" height="15" fill="rgb(249,80,12)" fg:x="3414" fg:w="3"/><text x="45.2658%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;k_coding_test::engine::error::EngineErrorKind&gt;&gt; (3 samples, 0.04%)</title><rect x="45.0158%" y="261" width="0.0396%" height="15" fill="rgb(221,65,9)" fg:x="3414" fg:w="3"/><text x="45.2658%" y="271.50"></text></g><g><title>alloc::alloc::box_free (3 samples, 0.04%)</title><rect x="45.0158%" y="245" width="0.0396%" height="15" fill="rgb(235,49,36)" fg:x="3414" fg:w="3"/><text x="45.2658%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3 samples, 0.04%)</title><rect x="45.0158%" y="229" width="0.0396%" height="15" fill="rgb(225,32,20)" fg:x="3414" fg:w="3"/><text x="45.2658%" y="239.50"></text></g><g><title>alloc::alloc::dealloc (3 samples, 0.04%)</title><rect x="45.0158%" y="213" width="0.0396%" height="15" fill="rgb(215,141,46)" fg:x="3414" fg:w="3"/><text x="45.2658%" y="223.50"></text></g><g><title>csv::Trim::should_trim_fields (14 samples, 0.18%)</title><rect x="45.0554%" y="293" width="0.1846%" height="15" fill="rgb(250,160,47)" fg:x="3417" fg:w="14"/><text x="45.3054%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (6 samples, 0.08%)</title><rect x="46.0707%" y="245" width="0.0791%" height="15" fill="rgb(216,222,40)" fg:x="3494" fg:w="6"/><text x="46.3207%" y="255.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (6 samples, 0.08%)</title><rect x="46.0707%" y="229" width="0.0791%" height="15" fill="rgb(234,217,39)" fg:x="3494" fg:w="6"/><text x="46.3207%" y="239.50"></text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (6 samples, 0.08%)</title><rect x="46.0707%" y="213" width="0.0791%" height="15" fill="rgb(207,178,40)" fg:x="3494" fg:w="6"/><text x="46.3207%" y="223.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (6 samples, 0.08%)</title><rect x="46.0707%" y="197" width="0.0791%" height="15" fill="rgb(221,136,13)" fg:x="3494" fg:w="6"/><text x="46.3207%" y="207.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (10 samples, 0.13%)</title><rect x="46.1498%" y="229" width="0.1319%" height="15" fill="rgb(249,199,10)" fg:x="3500" fg:w="10"/><text x="46.3998%" y="239.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::last (3 samples, 0.04%)</title><rect x="46.2816%" y="229" width="0.0396%" height="15" fill="rgb(249,222,13)" fg:x="3510" fg:w="3"/><text x="46.5316%" y="239.50"></text></g><g><title>csv::byte_record::Bounds::ends (7 samples, 0.09%)</title><rect x="46.3212%" y="229" width="0.0923%" height="15" fill="rgb(244,185,38)" fg:x="3513" fg:w="7"/><text x="46.5712%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (3 samples, 0.04%)</title><rect x="46.3739%" y="213" width="0.0396%" height="15" fill="rgb(236,202,9)" fg:x="3517" fg:w="3"/><text x="46.6239%" y="223.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (3 samples, 0.04%)</title><rect x="46.3739%" y="197" width="0.0396%" height="15" fill="rgb(250,229,37)" fg:x="3517" fg:w="3"/><text x="46.6239%" y="207.50"></text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (3 samples, 0.04%)</title><rect x="46.3739%" y="181" width="0.0396%" height="15" fill="rgb(206,174,23)" fg:x="3517" fg:w="3"/><text x="46.6239%" y="191.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (3 samples, 0.04%)</title><rect x="46.3739%" y="165" width="0.0396%" height="15" fill="rgb(211,33,43)" fg:x="3517" fg:w="3"/><text x="46.6239%" y="175.50"></text></g><g><title>csv::byte_record::Bounds::end (22 samples, 0.29%)</title><rect x="46.1498%" y="245" width="0.2901%" height="15" fill="rgb(245,58,50)" fg:x="3500" fg:w="22"/><text x="46.3998%" y="255.50"></text></g><g><title>csv::byte_record::ByteRecord::trim (2 samples, 0.03%)</title><rect x="46.4135%" y="229" width="0.0264%" height="15" fill="rgb(244,68,36)" fg:x="3520" fg:w="2"/><text x="46.6635%" y="239.50"></text></g><g><title>&lt;&amp;csv::byte_record::ByteRecord as core::iter::traits::collect::IntoIterator&gt;::into_iter (34 samples, 0.45%)</title><rect x="46.0707%" y="277" width="0.4483%" height="15" fill="rgb(232,229,15)" fg:x="3494" fg:w="34"/><text x="46.3207%" y="287.50"></text></g><g><title>csv::byte_record::ByteRecord::as_slice (34 samples, 0.45%)</title><rect x="46.0707%" y="261" width="0.4483%" height="15" fill="rgb(254,30,23)" fg:x="3494" fg:w="34"/><text x="46.3207%" y="271.50"></text></g><g><title>csv::byte_record::ByteRecord::trim (6 samples, 0.08%)</title><rect x="46.4399%" y="245" width="0.0791%" height="15" fill="rgb(235,160,14)" fg:x="3522" fg:w="6"/><text x="46.6899%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (28 samples, 0.37%)</title><rect x="46.9277%" y="261" width="0.3692%" height="15" fill="rgb(212,155,44)" fg:x="3559" fg:w="28"/><text x="47.1777%" y="271.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (28 samples, 0.37%)</title><rect x="46.9277%" y="245" width="0.3692%" height="15" fill="rgb(226,2,50)" fg:x="3559" fg:w="28"/><text x="47.1777%" y="255.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (28 samples, 0.37%)</title><rect x="46.9277%" y="229" width="0.3692%" height="15" fill="rgb(234,177,6)" fg:x="3559" fg:w="28"/><text x="47.1777%" y="239.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (15 samples, 0.20%)</title><rect x="47.0992%" y="213" width="0.1978%" height="15" fill="rgb(217,24,9)" fg:x="3572" fg:w="15"/><text x="47.3492%" y="223.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (15 samples, 0.20%)</title><rect x="47.0992%" y="197" width="0.1978%" height="15" fill="rgb(220,13,46)" fg:x="3572" fg:w="15"/><text x="47.3492%" y="207.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (15 samples, 0.20%)</title><rect x="47.0992%" y="181" width="0.1978%" height="15" fill="rgb(239,221,27)" fg:x="3572" fg:w="15"/><text x="47.3492%" y="191.50"></text></g><g><title>csv::byte_record::Bounds::ends (36 samples, 0.47%)</title><rect x="47.2969%" y="261" width="0.4747%" height="15" fill="rgb(222,198,25)" fg:x="3587" fg:w="36"/><text x="47.5469%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (27 samples, 0.36%)</title><rect x="47.4156%" y="245" width="0.3560%" height="15" fill="rgb(211,99,13)" fg:x="3596" fg:w="27"/><text x="47.6656%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (27 samples, 0.36%)</title><rect x="47.4156%" y="229" width="0.3560%" height="15" fill="rgb(232,111,31)" fg:x="3596" fg:w="27"/><text x="47.6656%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (27 samples, 0.36%)</title><rect x="47.4156%" y="213" width="0.3560%" height="15" fill="rgb(245,82,37)" fg:x="3596" fg:w="27"/><text x="47.6656%" y="223.50"></text></g><g><title>&lt;csv::byte_record::ByteRecordIter as core::iter::traits::iterator::Iterator&gt;::next (110 samples, 1.45%)</title><rect x="46.5190%" y="277" width="1.4504%" height="15" fill="rgb(227,149,46)" fg:x="3528" fg:w="110"/><text x="46.7690%" y="287.50"></text></g><g><title>csv::byte_record::ByteRecord::trim (15 samples, 0.20%)</title><rect x="47.7716%" y="261" width="0.1978%" height="15" fill="rgb(218,36,50)" fg:x="3623" fg:w="15"/><text x="48.0216%" y="271.50"></text></g><g><title>bstr::ext_slice::ByteSlice::trim_end (26 samples, 0.34%)</title><rect x="47.9694%" y="261" width="0.3428%" height="15" fill="rgb(226,80,48)" fg:x="3638" fg:w="26"/><text x="48.2194%" y="271.50"></text></g><g><title>bstr::ext_slice::ByteSlice::trim (70 samples, 0.92%)</title><rect x="47.9694%" y="277" width="0.9230%" height="15" fill="rgb(238,224,15)" fg:x="3638" fg:w="70"/><text x="48.2194%" y="287.50"></text></g><g><title>bstr::ext_slice::ByteSlice::trim_start (44 samples, 0.58%)</title><rect x="48.3122%" y="261" width="0.5802%" height="15" fill="rgb(241,136,10)" fg:x="3664" fg:w="44"/><text x="48.5622%" y="271.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (12 samples, 0.16%)</title><rect x="48.7342%" y="245" width="0.1582%" height="15" fill="rgb(208,32,45)" fg:x="3696" fg:w="12"/><text x="48.9842%" y="255.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (12 samples, 0.16%)</title><rect x="48.7342%" y="229" width="0.1582%" height="15" fill="rgb(207,135,9)" fg:x="3696" fg:w="12"/><text x="48.9842%" y="239.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (3 samples, 0.04%)</title><rect x="48.8528%" y="213" width="0.0396%" height="15" fill="rgb(206,86,44)" fg:x="3705" fg:w="3"/><text x="49.1028%" y="223.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (3 samples, 0.04%)</title><rect x="48.8528%" y="197" width="0.0396%" height="15" fill="rgb(245,177,15)" fg:x="3705" fg:w="3"/><text x="49.1028%" y="207.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (3 samples, 0.04%)</title><rect x="48.8528%" y="181" width="0.0396%" height="15" fill="rgb(206,64,50)" fg:x="3705" fg:w="3"/><text x="49.1028%" y="191.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (3 samples, 0.04%)</title><rect x="48.8528%" y="165" width="0.0396%" height="15" fill="rgb(234,36,40)" fg:x="3705" fg:w="3"/><text x="49.1028%" y="175.50"></text></g><g><title>core::option::Option&lt;&amp;T&gt;::cloned (1 samples, 0.01%)</title><rect x="48.8924%" y="277" width="0.0132%" height="15" fill="rgb(213,64,8)" fg:x="3708" fg:w="1"/><text x="49.1424%" y="287.50"></text></g><g><title>alloc::alloc::dealloc (13 samples, 0.17%)</title><rect x="48.9056%" y="213" width="0.1714%" height="15" fill="rgb(210,75,36)" fg:x="3709" fg:w="13"/><text x="49.1556%" y="223.50"></text></g><g><title>alloc::alloc::box_free (16 samples, 0.21%)</title><rect x="48.9056%" y="245" width="0.2110%" height="15" fill="rgb(229,88,21)" fg:x="3709" fg:w="16"/><text x="49.1556%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (16 samples, 0.21%)</title><rect x="48.9056%" y="229" width="0.2110%" height="15" fill="rgb(252,204,47)" fg:x="3709" fg:w="16"/><text x="49.1556%" y="239.50"></text></g><g><title>csv::byte_record::ByteRecord::trim (3 samples, 0.04%)</title><rect x="49.0770%" y="213" width="0.0396%" height="15" fill="rgb(208,77,27)" fg:x="3722" fg:w="3"/><text x="49.3270%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (6 samples, 0.08%)</title><rect x="49.1166%" y="181" width="0.0791%" height="15" fill="rgb(221,76,26)" fg:x="3725" fg:w="6"/><text x="49.3666%" y="191.50"></text></g><g><title>alloc::alloc::dealloc (6 samples, 0.08%)</title><rect x="49.1166%" y="165" width="0.0791%" height="15" fill="rgb(225,139,18)" fg:x="3725" fg:w="6"/><text x="49.3666%" y="175.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11 samples, 0.15%)</title><rect x="49.1166%" y="197" width="0.1450%" height="15" fill="rgb(230,137,11)" fg:x="3725" fg:w="11"/><text x="49.3666%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (5 samples, 0.07%)</title><rect x="49.1957%" y="181" width="0.0659%" height="15" fill="rgb(212,28,1)" fg:x="3731" fg:w="5"/><text x="49.4457%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (13 samples, 0.17%)</title><rect x="49.1166%" y="229" width="0.1714%" height="15" fill="rgb(248,164,17)" fg:x="3725" fg:w="13"/><text x="49.3666%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (13 samples, 0.17%)</title><rect x="49.1166%" y="213" width="0.1714%" height="15" fill="rgb(222,171,42)" fg:x="3725" fg:w="13"/><text x="49.3666%" y="223.50"></text></g><g><title>csv::byte_record::ByteRecord::trim (2 samples, 0.03%)</title><rect x="49.2616%" y="197" width="0.0264%" height="15" fill="rgb(243,84,45)" fg:x="3736" fg:w="2"/><text x="49.5116%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;csv::byte_record::ByteRecord&gt; (49 samples, 0.65%)</title><rect x="48.9056%" y="277" width="0.6461%" height="15" fill="rgb(252,49,23)" fg:x="3709" fg:w="49"/><text x="49.1556%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;csv::byte_record::ByteRecordInner&gt;&gt; (49 samples, 0.65%)</title><rect x="48.9056%" y="261" width="0.6461%" height="15" fill="rgb(215,19,7)" fg:x="3709" fg:w="49"/><text x="49.1556%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;csv::byte_record::ByteRecordInner&gt; (33 samples, 0.44%)</title><rect x="49.1166%" y="245" width="0.4351%" height="15" fill="rgb(238,81,41)" fg:x="3725" fg:w="33"/><text x="49.3666%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;csv::byte_record::Bounds&gt; (20 samples, 0.26%)</title><rect x="49.2880%" y="229" width="0.2637%" height="15" fill="rgb(210,199,37)" fg:x="3738" fg:w="20"/><text x="49.5380%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;usize&gt;&gt; (20 samples, 0.26%)</title><rect x="49.2880%" y="213" width="0.2637%" height="15" fill="rgb(244,192,49)" fg:x="3738" fg:w="20"/><text x="49.5380%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;usize&gt;&gt; (20 samples, 0.26%)</title><rect x="49.2880%" y="197" width="0.2637%" height="15" fill="rgb(226,211,11)" fg:x="3738" fg:w="20"/><text x="49.5380%" y="207.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (20 samples, 0.26%)</title><rect x="49.2880%" y="181" width="0.2637%" height="15" fill="rgb(236,162,54)" fg:x="3738" fg:w="20"/><text x="49.5380%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (11 samples, 0.15%)</title><rect x="49.4066%" y="165" width="0.1450%" height="15" fill="rgb(220,229,9)" fg:x="3747" fg:w="11"/><text x="49.6566%" y="175.50"></text></g><g><title>alloc::alloc::dealloc (2 samples, 0.03%)</title><rect x="49.5253%" y="149" width="0.0264%" height="15" fill="rgb(250,87,22)" fg:x="3756" fg:w="2"/><text x="49.7753%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (7 samples, 0.09%)</title><rect x="49.5517%" y="245" width="0.0923%" height="15" fill="rgb(239,43,17)" fg:x="3758" fg:w="7"/><text x="49.8017%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (13 samples, 0.17%)</title><rect x="49.5517%" y="261" width="0.1714%" height="15" fill="rgb(231,177,25)" fg:x="3758" fg:w="13"/><text x="49.8017%" y="271.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (6 samples, 0.08%)</title><rect x="49.6440%" y="245" width="0.0791%" height="15" fill="rgb(219,179,1)" fg:x="3765" fg:w="6"/><text x="49.8940%" y="255.50"></text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (6 samples, 0.08%)</title><rect x="49.6440%" y="229" width="0.0791%" height="15" fill="rgb(238,219,53)" fg:x="3765" fg:w="6"/><text x="49.8940%" y="239.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (6 samples, 0.08%)</title><rect x="49.6440%" y="213" width="0.0791%" height="15" fill="rgb(232,167,36)" fg:x="3765" fg:w="6"/><text x="49.8940%" y="223.50"></text></g><g><title>csv::byte_record::ByteRecord::as_slice (30 samples, 0.40%)</title><rect x="49.5517%" y="277" width="0.3956%" height="15" fill="rgb(244,19,51)" fg:x="3758" fg:w="30"/><text x="49.8017%" y="287.50"></text></g><g><title>csv::byte_record::Bounds::end (17 samples, 0.22%)</title><rect x="49.7231%" y="261" width="0.2242%" height="15" fill="rgb(224,6,22)" fg:x="3771" fg:w="17"/><text x="49.9731%" y="271.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (17 samples, 0.22%)</title><rect x="49.7231%" y="245" width="0.2242%" height="15" fill="rgb(224,145,5)" fg:x="3771" fg:w="17"/><text x="49.9731%" y="255.50"></text></g><g><title>csv::byte_record::ByteRecord::len (28 samples, 0.37%)</title><rect x="49.9473%" y="277" width="0.3692%" height="15" fill="rgb(234,130,49)" fg:x="3788" fg:w="28"/><text x="50.1973%" y="287.50"></text></g><g><title>csv::byte_record::ByteRecord::position (3 samples, 0.04%)</title><rect x="50.3165%" y="277" width="0.0396%" height="15" fill="rgb(254,6,2)" fg:x="3816" fg:w="3"/><text x="50.5665%" y="287.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (3 samples, 0.04%)</title><rect x="50.3165%" y="261" width="0.0396%" height="15" fill="rgb(208,96,46)" fg:x="3816" fg:w="3"/><text x="50.5665%" y="271.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (25 samples, 0.33%)</title><rect x="50.6329%" y="229" width="0.3296%" height="15" fill="rgb(239,3,39)" fg:x="3840" fg:w="25"/><text x="50.8829%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (38 samples, 0.50%)</title><rect x="50.6329%" y="261" width="0.5011%" height="15" fill="rgb(233,210,1)" fg:x="3840" fg:w="38"/><text x="50.8829%" y="271.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (38 samples, 0.50%)</title><rect x="50.6329%" y="245" width="0.5011%" height="15" fill="rgb(244,137,37)" fg:x="3840" fg:w="38"/><text x="50.8829%" y="255.50"></text></g><g><title>csv::byte_record::ByteRecord::trim (13 samples, 0.17%)</title><rect x="50.9626%" y="229" width="0.1714%" height="15" fill="rgb(240,136,2)" fg:x="3865" fg:w="13"/><text x="51.2126%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (24 samples, 0.32%)</title><rect x="51.1340%" y="245" width="0.3165%" height="15" fill="rgb(239,18,37)" fg:x="3878" fg:w="24"/><text x="51.3840%" y="255.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (28 samples, 0.37%)</title><rect x="51.1340%" y="261" width="0.3692%" height="15" fill="rgb(218,185,22)" fg:x="3878" fg:w="28"/><text x="51.3840%" y="271.50"></text></g><g><title>csv::byte_record::ByteRecord::trim (4 samples, 0.05%)</title><rect x="51.4504%" y="245" width="0.0527%" height="15" fill="rgb(225,218,4)" fg:x="3902" fg:w="4"/><text x="51.7004%" y="255.50"></text></g><g><title>csv::byte_record::Bounds::add (46 samples, 0.61%)</title><rect x="51.5032%" y="261" width="0.6065%" height="15" fill="rgb(230,182,32)" fg:x="3906" fg:w="46"/><text x="51.7532%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (11 samples, 0.15%)</title><rect x="51.9647%" y="245" width="0.1450%" height="15" fill="rgb(242,56,43)" fg:x="3941" fg:w="11"/><text x="52.2147%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (11 samples, 0.15%)</title><rect x="51.9647%" y="229" width="0.1450%" height="15" fill="rgb(233,99,24)" fg:x="3941" fg:w="11"/><text x="52.2147%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (11 samples, 0.15%)</title><rect x="51.9647%" y="213" width="0.1450%" height="15" fill="rgb(234,209,42)" fg:x="3941" fg:w="11"/><text x="52.2147%" y="223.50"></text></g><g><title>csv::byte_record::Bounds::end (19 samples, 0.25%)</title><rect x="52.1097%" y="261" width="0.2505%" height="15" fill="rgb(227,7,12)" fg:x="3952" fg:w="19"/><text x="52.3597%" y="271.50"></text></g><g><title>csv::byte_record::Bounds::ends (19 samples, 0.25%)</title><rect x="52.1097%" y="245" width="0.2505%" height="15" fill="rgb(245,203,43)" fg:x="3952" fg:w="19"/><text x="52.3597%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (19 samples, 0.25%)</title><rect x="52.1097%" y="229" width="0.2505%" height="15" fill="rgb(238,205,33)" fg:x="3952" fg:w="19"/><text x="52.3597%" y="239.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (19 samples, 0.25%)</title><rect x="52.1097%" y="213" width="0.2505%" height="15" fill="rgb(231,56,7)" fg:x="3952" fg:w="19"/><text x="52.3597%" y="223.50"></text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (19 samples, 0.25%)</title><rect x="52.1097%" y="197" width="0.2505%" height="15" fill="rgb(244,186,29)" fg:x="3952" fg:w="19"/><text x="52.3597%" y="207.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (19 samples, 0.25%)</title><rect x="52.1097%" y="181" width="0.2505%" height="15" fill="rgb(234,111,31)" fg:x="3952" fg:w="19"/><text x="52.3597%" y="191.50"></text></g><g><title>csv::byte_record::ByteRecord::push_field (168 samples, 2.22%)</title><rect x="50.3560%" y="277" width="2.2152%" height="15" fill="rgb(241,149,10)" fg:x="3819" fg:w="168"/><text x="50.6060%" y="287.50">c..</text></g><g><title>csv::byte_record::ByteRecord::trim (16 samples, 0.21%)</title><rect x="52.3602%" y="261" width="0.2110%" height="15" fill="rgb(249,206,44)" fg:x="3971" fg:w="16"/><text x="52.6102%" y="271.50"></text></g><g><title>csv::byte_record::ByteRecord::set_position (2 samples, 0.03%)</title><rect x="52.5712%" y="277" width="0.0264%" height="15" fill="rgb(251,153,30)" fg:x="3987" fg:w="2"/><text x="52.8212%" y="287.50"></text></g><g><title>csv::byte_record::ByteRecord::trim (6 samples, 0.08%)</title><rect x="52.5976%" y="277" width="0.0791%" height="15" fill="rgb(239,152,38)" fg:x="3989" fg:w="6"/><text x="52.8476%" y="287.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (22 samples, 0.29%)</title><rect x="52.6767%" y="261" width="0.2901%" height="15" fill="rgb(249,139,47)" fg:x="3995" fg:w="22"/><text x="52.9267%" y="271.50"></text></g><g><title>alloc::alloc::exchange_malloc (6 samples, 0.08%)</title><rect x="52.8877%" y="245" width="0.0791%" height="15" fill="rgb(244,64,35)" fg:x="4011" fg:w="6"/><text x="53.1377%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (6 samples, 0.08%)</title><rect x="52.8877%" y="229" width="0.0791%" height="15" fill="rgb(216,46,15)" fg:x="4011" fg:w="6"/><text x="53.1377%" y="239.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (6 samples, 0.08%)</title><rect x="52.8877%" y="213" width="0.0791%" height="15" fill="rgb(250,74,19)" fg:x="4011" fg:w="6"/><text x="53.1377%" y="223.50"></text></g><g><title>alloc::alloc::alloc (6 samples, 0.08%)</title><rect x="52.8877%" y="197" width="0.0791%" height="15" fill="rgb(249,42,33)" fg:x="4011" fg:w="6"/><text x="53.1377%" y="207.50"></text></g><g><title>&lt;u8 as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (9 samples, 0.12%)</title><rect x="52.9668%" y="245" width="0.1187%" height="15" fill="rgb(242,149,17)" fg:x="4017" fg:w="9"/><text x="53.2168%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_zeroed_in (9 samples, 0.12%)</title><rect x="52.9668%" y="229" width="0.1187%" height="15" fill="rgb(244,29,21)" fg:x="4017" fg:w="9"/><text x="53.2168%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (9 samples, 0.12%)</title><rect x="52.9668%" y="213" width="0.1187%" height="15" fill="rgb(220,130,37)" fg:x="4017" fg:w="9"/><text x="53.2168%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate_zeroed (9 samples, 0.12%)</title><rect x="52.9668%" y="197" width="0.1187%" height="15" fill="rgb(211,67,2)" fg:x="4017" fg:w="9"/><text x="53.2168%" y="207.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (9 samples, 0.12%)</title><rect x="52.9668%" y="181" width="0.1187%" height="15" fill="rgb(235,68,52)" fg:x="4017" fg:w="9"/><text x="53.2168%" y="191.50"></text></g><g><title>alloc::alloc::alloc_zeroed (8 samples, 0.11%)</title><rect x="52.9800%" y="165" width="0.1055%" height="15" fill="rgb(246,142,3)" fg:x="4018" fg:w="8"/><text x="53.2300%" y="175.50"></text></g><g><title>alloc::vec::from_elem (12 samples, 0.16%)</title><rect x="52.9668%" y="261" width="0.1582%" height="15" fill="rgb(241,25,7)" fg:x="4017" fg:w="12"/><text x="53.2168%" y="271.50"></text></g><g><title>csv::byte_record::ByteRecord::trim (3 samples, 0.04%)</title><rect x="53.0854%" y="245" width="0.0396%" height="15" fill="rgb(242,119,39)" fg:x="4026" fg:w="3"/><text x="53.3354%" y="255.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (14 samples, 0.18%)</title><rect x="53.1250%" y="229" width="0.1846%" height="15" fill="rgb(241,98,45)" fg:x="4029" fg:w="14"/><text x="53.3750%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_zeroed_in (14 samples, 0.18%)</title><rect x="53.1250%" y="213" width="0.1846%" height="15" fill="rgb(254,28,30)" fg:x="4029" fg:w="14"/><text x="53.3750%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (14 samples, 0.18%)</title><rect x="53.1250%" y="197" width="0.1846%" height="15" fill="rgb(241,142,54)" fg:x="4029" fg:w="14"/><text x="53.3750%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate_zeroed (14 samples, 0.18%)</title><rect x="53.1250%" y="181" width="0.1846%" height="15" fill="rgb(222,85,15)" fg:x="4029" fg:w="14"/><text x="53.3750%" y="191.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (14 samples, 0.18%)</title><rect x="53.1250%" y="165" width="0.1846%" height="15" fill="rgb(210,85,47)" fg:x="4029" fg:w="14"/><text x="53.3750%" y="175.50"></text></g><g><title>alloc::alloc::alloc_zeroed (14 samples, 0.18%)</title><rect x="53.1250%" y="149" width="0.1846%" height="15" fill="rgb(224,206,25)" fg:x="4029" fg:w="14"/><text x="53.3750%" y="159.50"></text></g><g><title>csv::byte_record::ByteRecord::trim (623 samples, 8.21%)</title><rect x="45.2400%" y="293" width="8.2147%" height="15" fill="rgb(243,201,19)" fg:x="3431" fg:w="623"/><text x="45.4900%" y="303.50">csv::byte_r..</text></g><g><title>csv::byte_record::ByteRecord::with_capacity (59 samples, 0.78%)</title><rect x="52.6767%" y="277" width="0.7780%" height="15" fill="rgb(236,59,4)" fg:x="3995" fg:w="59"/><text x="52.9267%" y="287.50"></text></g><g><title>csv::byte_record::Bounds::with_capacity (25 samples, 0.33%)</title><rect x="53.1250%" y="261" width="0.3296%" height="15" fill="rgb(254,179,45)" fg:x="4029" fg:w="25"/><text x="53.3750%" y="271.50"></text></g><g><title>alloc::vec::from_elem (25 samples, 0.33%)</title><rect x="53.1250%" y="245" width="0.3296%" height="15" fill="rgb(226,14,10)" fg:x="4029" fg:w="25"/><text x="53.3750%" y="255.50"></text></g><g><title>csv::byte_record::ByteRecord::trim (11 samples, 0.15%)</title><rect x="53.3096%" y="229" width="0.1450%" height="15" fill="rgb(244,27,41)" fg:x="4043" fg:w="11"/><text x="53.5596%" y="239.50"></text></g><g><title>csv::reader::Reader&lt;R&gt;::read_byte_record (29 samples, 0.38%)</title><rect x="54.6150%" y="277" width="0.3824%" height="15" fill="rgb(235,35,32)" fg:x="4142" fg:w="29"/><text x="54.8650%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (6 samples, 0.08%)</title><rect x="55.4193%" y="245" width="0.0791%" height="15" fill="rgb(218,68,31)" fg:x="4203" fg:w="6"/><text x="55.6693%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (20 samples, 0.26%)</title><rect x="55.4193%" y="261" width="0.2637%" height="15" fill="rgb(207,120,37)" fg:x="4203" fg:w="20"/><text x="55.6693%" y="271.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (14 samples, 0.18%)</title><rect x="55.4984%" y="245" width="0.1846%" height="15" fill="rgb(227,98,0)" fg:x="4209" fg:w="14"/><text x="55.7484%" y="255.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (14 samples, 0.18%)</title><rect x="55.4984%" y="229" width="0.1846%" height="15" fill="rgb(207,7,3)" fg:x="4209" fg:w="14"/><text x="55.7484%" y="239.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (3 samples, 0.04%)</title><rect x="55.6435%" y="213" width="0.0396%" height="15" fill="rgb(206,98,19)" fg:x="4220" fg:w="3"/><text x="55.8935%" y="223.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (3 samples, 0.04%)</title><rect x="55.6435%" y="197" width="0.0396%" height="15" fill="rgb(217,5,26)" fg:x="4220" fg:w="3"/><text x="55.8935%" y="207.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (3 samples, 0.04%)</title><rect x="55.6435%" y="181" width="0.0396%" height="15" fill="rgb(235,190,38)" fg:x="4220" fg:w="3"/><text x="55.8935%" y="191.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (3 samples, 0.04%)</title><rect x="55.6435%" y="165" width="0.0396%" height="15" fill="rgb(247,86,24)" fg:x="4220" fg:w="3"/><text x="55.8935%" y="175.50"></text></g><g><title>core::cmp::min_by (2 samples, 0.03%)</title><rect x="55.9995%" y="213" width="0.0264%" height="15" fill="rgb(205,101,16)" fg:x="4247" fg:w="2"/><text x="56.2495%" y="223.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::BufRead&gt;::consume (32 samples, 0.42%)</title><rect x="55.6830%" y="261" width="0.4219%" height="15" fill="rgb(246,168,33)" fg:x="4223" fg:w="32"/><text x="55.9330%" y="271.50"></text></g><g><title>core::cmp::min (8 samples, 0.11%)</title><rect x="55.9995%" y="245" width="0.1055%" height="15" fill="rgb(231,114,1)" fg:x="4247" fg:w="8"/><text x="56.2495%" y="255.50"></text></g><g><title>core::cmp::Ord::min (8 samples, 0.11%)</title><rect x="55.9995%" y="229" width="0.1055%" height="15" fill="rgb(207,184,53)" fg:x="4247" fg:w="8"/><text x="56.2495%" y="239.50"></text></g><g><title>csv::reader::Reader&lt;R&gt;::read_byte_record (6 samples, 0.08%)</title><rect x="56.0258%" y="213" width="0.0791%" height="15" fill="rgb(224,95,51)" fg:x="4249" fg:w="6"/><text x="56.2758%" y="223.50"></text></g><g><title>std::io::buffered::bufreader::BufReader&lt;R&gt;::buffer (3 samples, 0.04%)</title><rect x="56.2896%" y="245" width="0.0396%" height="15" fill="rgb(212,188,45)" fg:x="4269" fg:w="3"/><text x="56.5396%" y="255.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (2 samples, 0.03%)</title><rect x="56.3027%" y="229" width="0.0264%" height="15" fill="rgb(223,154,38)" fg:x="4270" fg:w="2"/><text x="56.5527%" y="239.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (2 samples, 0.03%)</title><rect x="56.3027%" y="213" width="0.0264%" height="15" fill="rgb(251,22,52)" fg:x="4270" fg:w="2"/><text x="56.5527%" y="223.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::BufRead&gt;::fill_buf (18 samples, 0.24%)</title><rect x="56.1050%" y="261" width="0.2373%" height="15" fill="rgb(229,209,22)" fg:x="4255" fg:w="18"/><text x="56.3550%" y="271.50"></text></g><g><title>std::io::readbuf::ReadBuf::assume_init (1 samples, 0.01%)</title><rect x="56.3291%" y="245" width="0.0132%" height="15" fill="rgb(234,138,34)" fg:x="4272" fg:w="1"/><text x="56.5791%" y="255.50"></text></g><g><title>csv::byte_record::ByteRecord::clear (21 samples, 0.28%)</title><rect x="56.3423%" y="261" width="0.2769%" height="15" fill="rgb(212,95,11)" fg:x="4273" fg:w="21"/><text x="56.5923%" y="271.50"></text></g><g><title>csv::byte_record::ByteRecord::truncate (21 samples, 0.28%)</title><rect x="56.3423%" y="245" width="0.2769%" height="15" fill="rgb(240,179,47)" fg:x="4273" fg:w="21"/><text x="56.5923%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (5 samples, 0.07%)</title><rect x="56.6588%" y="213" width="0.0659%" height="15" fill="rgb(240,163,11)" fg:x="4297" fg:w="5"/><text x="56.9088%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (5 samples, 0.07%)</title><rect x="56.7247%" y="197" width="0.0659%" height="15" fill="rgb(236,37,12)" fg:x="4302" fg:w="5"/><text x="56.9747%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (3 samples, 0.04%)</title><rect x="56.7511%" y="181" width="0.0396%" height="15" fill="rgb(232,164,16)" fg:x="4304" fg:w="3"/><text x="57.0011%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (9 samples, 0.12%)</title><rect x="56.7247%" y="213" width="0.1187%" height="15" fill="rgb(244,205,15)" fg:x="4302" fg:w="9"/><text x="56.9747%" y="223.50"></text></g><g><title>csv::reader::Reader&lt;R&gt;::read_byte_record (4 samples, 0.05%)</title><rect x="56.7906%" y="197" width="0.0527%" height="15" fill="rgb(223,117,47)" fg:x="4307" fg:w="4"/><text x="57.0406%" y="207.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (6 samples, 0.08%)</title><rect x="56.8434%" y="213" width="0.0791%" height="15" fill="rgb(244,107,35)" fg:x="4311" fg:w="6"/><text x="57.0934%" y="223.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (6 samples, 0.08%)</title><rect x="56.8434%" y="197" width="0.0791%" height="15" fill="rgb(205,140,8)" fg:x="4311" fg:w="6"/><text x="57.0934%" y="207.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (5 samples, 0.07%)</title><rect x="56.9225%" y="213" width="0.0659%" height="15" fill="rgb(228,84,46)" fg:x="4317" fg:w="5"/><text x="57.1725%" y="223.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (5 samples, 0.07%)</title><rect x="56.9225%" y="197" width="0.0659%" height="15" fill="rgb(254,188,9)" fg:x="4317" fg:w="5"/><text x="57.1725%" y="207.50"></text></g><g><title>core::ptr::write (3 samples, 0.04%)</title><rect x="56.9884%" y="213" width="0.0396%" height="15" fill="rgb(206,112,54)" fg:x="4322" fg:w="3"/><text x="57.2384%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::resize (31 samples, 0.41%)</title><rect x="56.6588%" y="245" width="0.4088%" height="15" fill="rgb(216,84,49)" fg:x="4297" fg:w="31"/><text x="56.9088%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (31 samples, 0.41%)</title><rect x="56.6588%" y="229" width="0.4088%" height="15" fill="rgb(214,194,35)" fg:x="4297" fg:w="31"/><text x="56.9088%" y="239.50"></text></g><g><title>csv::reader::Reader&lt;R&gt;::read_byte_record (3 samples, 0.04%)</title><rect x="57.0280%" y="213" width="0.0396%" height="15" fill="rgb(249,28,3)" fg:x="4325" fg:w="3"/><text x="57.2780%" y="223.50"></text></g><g><title>csv::byte_record::ByteRecord::expand_fields (40 samples, 0.53%)</title><rect x="56.6192%" y="261" width="0.5274%" height="15" fill="rgb(222,56,52)" fg:x="4294" fg:w="40"/><text x="56.8692%" y="271.50"></text></g><g><title>core::cmp::max (6 samples, 0.08%)</title><rect x="57.0675%" y="245" width="0.0791%" height="15" fill="rgb(245,217,50)" fg:x="4328" fg:w="6"/><text x="57.3175%" y="255.50"></text></g><g><title>core::cmp::Ord::max (6 samples, 0.08%)</title><rect x="57.0675%" y="229" width="0.0791%" height="15" fill="rgb(213,201,24)" fg:x="4328" fg:w="6"/><text x="57.3175%" y="239.50"></text></g><g><title>csv::reader::Reader&lt;R&gt;::read_byte_record (6 samples, 0.08%)</title><rect x="57.0675%" y="213" width="0.0791%" height="15" fill="rgb(248,116,28)" fg:x="4328" fg:w="6"/><text x="57.3175%" y="223.50"></text></g><g><title>csv::byte_record::ByteRecord::set_len (4 samples, 0.05%)</title><rect x="57.1466%" y="261" width="0.0527%" height="15" fill="rgb(219,72,43)" fg:x="4334" fg:w="4"/><text x="57.3966%" y="271.50"></text></g><g><title>csv::byte_record::ByteRecord::set_position (8 samples, 0.11%)</title><rect x="57.1994%" y="261" width="0.1055%" height="15" fill="rgb(209,138,14)" fg:x="4338" fg:w="8"/><text x="57.4494%" y="271.50"></text></g><g><title>csv::byte_record::Position::set_byte (1 samples, 0.01%)</title><rect x="57.3049%" y="261" width="0.0132%" height="15" fill="rgb(222,18,33)" fg:x="4346" fg:w="1"/><text x="57.5549%" y="271.50"></text></g><g><title>csv::byte_record::Position::set_line (24 samples, 0.32%)</title><rect x="57.3180%" y="261" width="0.3165%" height="15" fill="rgb(213,199,7)" fg:x="4347" fg:w="24"/><text x="57.5680%" y="271.50"></text></g><g><title>core::num::&lt;impl u64&gt;::checked_add (1 samples, 0.01%)</title><rect x="57.6872%" y="245" width="0.0132%" height="15" fill="rgb(250,110,10)" fg:x="4375" fg:w="1"/><text x="57.9372%" y="255.50"></text></g><g><title>core::num::&lt;impl u64&gt;::overflowing_add (1 samples, 0.01%)</title><rect x="57.6872%" y="229" width="0.0132%" height="15" fill="rgb(248,123,6)" fg:x="4375" fg:w="1"/><text x="57.9372%" y="239.50"></text></g><g><title>csv::reader::Reader&lt;R&gt;::read_byte_record (325 samples, 4.29%)</title><rect x="53.4546%" y="293" width="4.2853%" height="15" fill="rgb(206,91,31)" fg:x="4054" fg:w="325"/><text x="53.7046%" y="303.50">csv::..</text></g><g><title>csv::reader::Reader&lt;R&gt;::read_byte_record_impl (208 samples, 2.74%)</title><rect x="54.9974%" y="277" width="2.7426%" height="15" fill="rgb(211,154,13)" fg:x="4171" fg:w="208"/><text x="55.2474%" y="287.50">cs..</text></g><g><title>csv::reader::ReaderState::add_record (8 samples, 0.11%)</title><rect x="57.6345%" y="261" width="0.1055%" height="15" fill="rgb(225,148,7)" fg:x="4371" fg:w="8"/><text x="57.8845%" y="271.50"></text></g><g><title>csv::byte_record::Position::set_record (3 samples, 0.04%)</title><rect x="57.7004%" y="245" width="0.0396%" height="15" fill="rgb(220,160,43)" fg:x="4376" fg:w="3"/><text x="57.9504%" y="255.50"></text></g><g><title>csv_core::reader::Reader::line (13 samples, 0.17%)</title><rect x="57.7400%" y="293" width="0.1714%" height="15" fill="rgb(213,52,39)" fg:x="4379" fg:w="13"/><text x="57.9900%" y="303.50"></text></g><g><title>csv_core::reader::Reader::read_record (23 samples, 0.30%)</title><rect x="58.9662%" y="277" width="0.3033%" height="15" fill="rgb(243,137,7)" fg:x="4472" fg:w="23"/><text x="59.2162%" y="287.50"></text></g><g><title>&lt;csv_core::reader::DfaState as core::cmp::PartialEq&gt;::eq (14 samples, 0.18%)</title><rect x="63.1857%" y="261" width="0.1846%" height="15" fill="rgb(230,79,13)" fg:x="4792" fg:w="14"/><text x="63.4357%" y="271.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.01%)</title><rect x="63.3703%" y="261" width="0.0132%" height="15" fill="rgb(247,105,23)" fg:x="4806" fg:w="1"/><text x="63.6203%" y="271.50"></text></g><g><title>sysvec_apic_timer_interrupt (1 samples, 0.01%)</title><rect x="63.3703%" y="245" width="0.0132%" height="15" fill="rgb(223,179,41)" fg:x="4806" fg:w="1"/><text x="63.6203%" y="255.50"></text></g><g><title>__sysvec_apic_timer_interrupt (1 samples, 0.01%)</title><rect x="63.3703%" y="229" width="0.0132%" height="15" fill="rgb(218,9,34)" fg:x="4806" fg:w="1"/><text x="63.6203%" y="239.50"></text></g><g><title>hrtimer_interrupt (1 samples, 0.01%)</title><rect x="63.3703%" y="213" width="0.0132%" height="15" fill="rgb(222,106,8)" fg:x="4806" fg:w="1"/><text x="63.6203%" y="223.50"></text></g><g><title>__hrtimer_run_queues (1 samples, 0.01%)</title><rect x="63.3703%" y="197" width="0.0132%" height="15" fill="rgb(211,220,0)" fg:x="4806" fg:w="1"/><text x="63.6203%" y="207.50"></text></g><g><title>tick_sched_timer (1 samples, 0.01%)</title><rect x="63.3703%" y="181" width="0.0132%" height="15" fill="rgb(229,52,16)" fg:x="4806" fg:w="1"/><text x="63.6203%" y="191.50"></text></g><g><title>tick_sched_handle (1 samples, 0.01%)</title><rect x="63.3703%" y="165" width="0.0132%" height="15" fill="rgb(212,155,18)" fg:x="4806" fg:w="1"/><text x="63.6203%" y="175.50"></text></g><g><title>update_process_times (1 samples, 0.01%)</title><rect x="63.3703%" y="149" width="0.0132%" height="15" fill="rgb(242,21,14)" fg:x="4806" fg:w="1"/><text x="63.6203%" y="159.50"></text></g><g><title>scheduler_tick (1 samples, 0.01%)</title><rect x="63.3703%" y="133" width="0.0132%" height="15" fill="rgb(222,19,48)" fg:x="4806" fg:w="1"/><text x="63.6203%" y="143.50"></text></g><g><title>perf_event_task_tick (1 samples, 0.01%)</title><rect x="63.3703%" y="117" width="0.0132%" height="15" fill="rgb(232,45,27)" fg:x="4806" fg:w="1"/><text x="63.6203%" y="127.50"></text></g><g><title>core::cmp::PartialOrd::ge (2 samples, 0.03%)</title><rect x="63.3834%" y="261" width="0.0264%" height="15" fill="rgb(249,103,42)" fg:x="4807" fg:w="2"/><text x="63.6334%" y="271.50"></text></g><g><title>&lt;csv_core::reader::DfaState as core::cmp::PartialOrd&gt;::partial_cmp (2 samples, 0.03%)</title><rect x="63.3834%" y="245" width="0.0264%" height="15" fill="rgb(246,81,33)" fg:x="4807" fg:w="2"/><text x="63.6334%" y="255.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for u8&gt;::partial_cmp (2 samples, 0.03%)</title><rect x="63.3834%" y="229" width="0.0264%" height="15" fill="rgb(252,33,42)" fg:x="4807" fg:w="2"/><text x="63.6334%" y="239.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for u8&gt;::cmp (2 samples, 0.03%)</title><rect x="63.3834%" y="213" width="0.0264%" height="15" fill="rgb(209,212,41)" fg:x="4807" fg:w="2"/><text x="63.6334%" y="223.50"></text></g><g><title>core::cmp::PartialOrd::gt (1 samples, 0.01%)</title><rect x="63.4098%" y="261" width="0.0132%" height="15" fill="rgb(207,154,6)" fg:x="4809" fg:w="1"/><text x="63.6598%" y="271.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::is_empty (1 samples, 0.01%)</title><rect x="63.4230%" y="261" width="0.0132%" height="15" fill="rgb(223,64,47)" fg:x="4810" fg:w="1"/><text x="63.6730%" y="271.50"></text></g><g><title>csv_core::reader::Dfa::get_output (258 samples, 3.40%)</title><rect x="63.4362%" y="261" width="3.4019%" height="15" fill="rgb(211,161,38)" fg:x="4811" fg:w="258"/><text x="63.6862%" y="271.50">csv..</text></g><g><title>csv_core::reader::Dfa::new_read_record_result (34 samples, 0.45%)</title><rect x="66.8381%" y="261" width="0.4483%" height="15" fill="rgb(219,138,40)" fg:x="5069" fg:w="34"/><text x="67.0881%" y="271.50"></text></g><g><title>core::cmp::PartialOrd::ge (12 samples, 0.16%)</title><rect x="67.1282%" y="245" width="0.1582%" height="15" fill="rgb(241,228,46)" fg:x="5091" fg:w="12"/><text x="67.3782%" y="255.50"></text></g><g><title>&lt;csv_core::reader::DfaState as core::cmp::PartialOrd&gt;::partial_cmp (12 samples, 0.16%)</title><rect x="67.1282%" y="229" width="0.1582%" height="15" fill="rgb(223,209,38)" fg:x="5091" fg:w="12"/><text x="67.3782%" y="239.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for u8&gt;::partial_cmp (12 samples, 0.16%)</title><rect x="67.1282%" y="213" width="0.1582%" height="15" fill="rgb(236,164,45)" fg:x="5091" fg:w="12"/><text x="67.3782%" y="223.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for u8&gt;::cmp (12 samples, 0.16%)</title><rect x="67.1282%" y="197" width="0.1582%" height="15" fill="rgb(231,15,5)" fg:x="5091" fg:w="12"/><text x="67.3782%" y="207.50"></text></g><g><title>__sysvec_apic_timer_interrupt (1 samples, 0.01%)</title><rect x="72.5738%" y="213" width="0.0132%" height="15" fill="rgb(252,35,15)" fg:x="5504" fg:w="1"/><text x="72.8238%" y="223.50"></text></g><g><title>hrtimer_interrupt (1 samples, 0.01%)</title><rect x="72.5738%" y="197" width="0.0132%" height="15" fill="rgb(248,181,18)" fg:x="5504" fg:w="1"/><text x="72.8238%" y="207.50"></text></g><g><title>csv_core::reader::Reader::read_record_dfa (1,011 samples, 13.33%)</title><rect x="59.2695%" y="277" width="13.3307%" height="15" fill="rgb(233,39,42)" fg:x="4495" fg:w="1011"/><text x="59.5195%" y="287.50">csv_core::reader::Re..</text></g><g><title>csv_core::reader::DfaClasses::scan_and_copy (403 samples, 5.31%)</title><rect x="67.2864%" y="261" width="5.3138%" height="15" fill="rgb(238,110,33)" fg:x="5103" fg:w="403"/><text x="67.5364%" y="271.50">csv_cor..</text></g><g><title>asm_sysvec_apic_timer_interrupt (2 samples, 0.03%)</title><rect x="72.5738%" y="245" width="0.0264%" height="15" fill="rgb(233,195,10)" fg:x="5504" fg:w="2"/><text x="72.8238%" y="255.50"></text></g><g><title>sysvec_apic_timer_interrupt (2 samples, 0.03%)</title><rect x="72.5738%" y="229" width="0.0264%" height="15" fill="rgb(254,105,3)" fg:x="5504" fg:w="2"/><text x="72.8238%" y="239.50"></text></g><g><title>irq_exit_rcu (1 samples, 0.01%)</title><rect x="72.5870%" y="213" width="0.0132%" height="15" fill="rgb(221,225,9)" fg:x="5505" fg:w="1"/><text x="72.8370%" y="223.50"></text></g><g><title>irqtime_account_irq (1 samples, 0.01%)</title><rect x="72.5870%" y="197" width="0.0132%" height="15" fill="rgb(224,227,45)" fg:x="5505" fg:w="1"/><text x="72.8370%" y="207.50"></text></g><g><title>csv_core::reader::Reader::read_record (1,123 samples, 14.81%)</title><rect x="57.9114%" y="293" width="14.8075%" height="15" fill="rgb(229,198,43)" fg:x="4392" fg:w="1123"/><text x="58.1614%" y="303.50">csv_core::reader::Reade..</text></g><g><title>csv_core::reader::Reader::strip_utf8_bom (9 samples, 0.12%)</title><rect x="72.6002%" y="277" width="0.1187%" height="15" fill="rgb(206,209,35)" fg:x="5506" fg:w="9"/><text x="72.8502%" y="287.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (1 samples, 0.01%)</title><rect x="72.7189%" y="293" width="0.0132%" height="15" fill="rgb(245,195,53)" fg:x="5515" fg:w="1"/><text x="72.9689%" y="303.50"></text></g><g><title>do_syscall_64 (1 samples, 0.01%)</title><rect x="72.7189%" y="277" width="0.0132%" height="15" fill="rgb(240,92,26)" fg:x="5515" fg:w="1"/><text x="72.9689%" y="287.50"></text></g><g><title>__x64_sys_execve (1 samples, 0.01%)</title><rect x="72.7189%" y="261" width="0.0132%" height="15" fill="rgb(207,40,23)" fg:x="5515" fg:w="1"/><text x="72.9689%" y="271.50"></text></g><g><title>do_execveat_common.isra.0 (1 samples, 0.01%)</title><rect x="72.7189%" y="245" width="0.0132%" height="15" fill="rgb(223,111,35)" fg:x="5515" fg:w="1"/><text x="72.9689%" y="255.50"></text></g><g><title>bprm_execve (1 samples, 0.01%)</title><rect x="72.7189%" y="229" width="0.0132%" height="15" fill="rgb(229,147,28)" fg:x="5515" fg:w="1"/><text x="72.9689%" y="239.50"></text></g><g><title>load_elf_binary (1 samples, 0.01%)</title><rect x="72.7189%" y="213" width="0.0132%" height="15" fill="rgb(211,29,28)" fg:x="5515" fg:w="1"/><text x="72.9689%" y="223.50"></text></g><g><title>arch_mmap_rnd (1 samples, 0.01%)</title><rect x="72.7189%" y="197" width="0.0132%" height="15" fill="rgb(228,72,33)" fg:x="5515" fg:w="1"/><text x="72.9689%" y="207.50"></text></g><g><title>get_random_u64 (1 samples, 0.01%)</title><rect x="72.7189%" y="181" width="0.0132%" height="15" fill="rgb(205,214,31)" fg:x="5515" fg:w="1"/><text x="72.9689%" y="191.50"></text></g><g><title>_extract_crng (1 samples, 0.01%)</title><rect x="72.7189%" y="165" width="0.0132%" height="15" fill="rgb(224,111,15)" fg:x="5515" fg:w="1"/><text x="72.9689%" y="175.50"></text></g><g><title>k_coding_test::engine::Engine::process (142 samples, 1.87%)</title><rect x="73.1145%" y="261" width="1.8724%" height="15" fill="rgb(253,21,26)" fg:x="5545" fg:w="142"/><text x="73.3645%" y="271.50">k..</text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::ensure_is_owned (6 samples, 0.08%)</title><rect x="75.1450%" y="229" width="0.0791%" height="15" fill="rgb(245,139,43)" fg:x="5699" fg:w="6"/><text x="75.3950%" y="239.50"></text></g><g><title>core::option::Option&lt;T&gt;::get_or_insert_with (6 samples, 0.08%)</title><rect x="75.1450%" y="213" width="0.0791%" height="15" fill="rgb(252,170,7)" fg:x="5699" fg:w="6"/><text x="75.3950%" y="223.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::Internal&gt;,alloc::collections::btree::node::marker::Edge&gt;::descend (4 samples, 0.05%)</title><rect x="75.2242%" y="213" width="0.0527%" height="15" fill="rgb(231,118,14)" fg:x="5705" fg:w="4"/><text x="75.4742%" y="223.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init_read (4 samples, 0.05%)</title><rect x="75.2242%" y="197" width="0.0527%" height="15" fill="rgb(238,83,0)" fg:x="5705" fg:w="4"/><text x="75.4742%" y="207.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::read (4 samples, 0.05%)</title><rect x="75.2242%" y="181" width="0.0527%" height="15" fill="rgb(221,39,39)" fg:x="5705" fg:w="4"/><text x="75.4742%" y="191.50"></text></g><g><title>core::ptr::read (4 samples, 0.05%)</title><rect x="75.2242%" y="165" width="0.0527%" height="15" fill="rgb(222,119,46)" fg:x="5705" fg:w="4"/><text x="75.4742%" y="175.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;,Type&gt;::force (1 samples, 0.01%)</title><rect x="75.2769%" y="213" width="0.0132%" height="15" fill="rgb(222,165,49)" fg:x="5709" fg:w="1"/><text x="75.5269%" y="223.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::force (1 samples, 0.01%)</title><rect x="75.2769%" y="197" width="0.0132%" height="15" fill="rgb(219,113,52)" fg:x="5709" fg:w="1"/><text x="75.5269%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 samples, 0.20%)</title><rect x="75.8966%" y="181" width="0.1978%" height="15" fill="rgb(214,7,15)" fg:x="5756" fg:w="15"/><text x="76.1466%" y="191.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 samples, 0.20%)</title><rect x="75.8966%" y="165" width="0.1978%" height="15" fill="rgb(235,32,4)" fg:x="5756" fg:w="15"/><text x="76.1466%" y="175.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,Type&gt;::keys (10 samples, 0.13%)</title><rect x="76.0944%" y="181" width="0.1319%" height="15" fill="rgb(238,90,54)" fg:x="5771" fg:w="10"/><text x="76.3444%" y="191.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::entry (122 samples, 1.61%)</title><rect x="75.0132%" y="245" width="1.6086%" height="15" fill="rgb(213,208,19)" fg:x="5689" fg:w="122"/><text x="75.2632%" y="255.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (106 samples, 1.40%)</title><rect x="75.2242%" y="229" width="1.3977%" height="15" fill="rgb(233,156,4)" fg:x="5705" fg:w="106"/><text x="75.4742%" y="239.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (101 samples, 1.33%)</title><rect x="75.2901%" y="213" width="1.3318%" height="15" fill="rgb(207,194,5)" fg:x="5710" fg:w="101"/><text x="75.5401%" y="223.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (101 samples, 1.33%)</title><rect x="75.2901%" y="197" width="1.3318%" height="15" fill="rgb(206,111,30)" fg:x="5710" fg:w="101"/><text x="75.5401%" y="207.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for u16&gt;::cmp (30 samples, 0.40%)</title><rect x="76.2263%" y="181" width="0.3956%" height="15" fill="rgb(243,70,54)" fg:x="5781" fg:w="30"/><text x="76.4763%" y="191.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,Type&gt;::borrow_mut (1 samples, 0.01%)</title><rect x="76.6218%" y="229" width="0.0132%" height="15" fill="rgb(242,28,8)" fg:x="5811" fg:w="1"/><text x="76.8718%" y="239.50"></text></g><g><title>core::ptr::read (41 samples, 0.54%)</title><rect x="76.7932%" y="165" width="0.5406%" height="15" fill="rgb(219,106,18)" fg:x="5824" fg:w="41"/><text x="77.0432%" y="175.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::Internal&gt;,alloc::collections::btree::node::marker::Edge&gt;::descend (59 samples, 0.78%)</title><rect x="76.7932%" y="213" width="0.7780%" height="15" fill="rgb(244,222,10)" fg:x="5824" fg:w="59"/><text x="77.0432%" y="223.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init_read (59 samples, 0.78%)</title><rect x="76.7932%" y="197" width="0.7780%" height="15" fill="rgb(236,179,52)" fg:x="5824" fg:w="59"/><text x="77.0432%" y="207.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::read (59 samples, 0.78%)</title><rect x="76.7932%" y="181" width="0.7780%" height="15" fill="rgb(213,23,39)" fg:x="5824" fg:w="59"/><text x="77.0432%" y="191.50"></text></g><g><title>k_coding_test::engine::Engine::process (18 samples, 0.24%)</title><rect x="77.3339%" y="165" width="0.2373%" height="15" fill="rgb(238,48,10)" fg:x="5865" fg:w="18"/><text x="77.5839%" y="175.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;,Type&gt;::force (12 samples, 0.16%)</title><rect x="77.5712%" y="213" width="0.1582%" height="15" fill="rgb(251,196,23)" fg:x="5883" fg:w="12"/><text x="77.8212%" y="223.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::force (12 samples, 0.16%)</title><rect x="77.5712%" y="197" width="0.1582%" height="15" fill="rgb(250,152,24)" fg:x="5883" fg:w="12"/><text x="77.8212%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (105 samples, 1.38%)</title><rect x="80.4589%" y="181" width="1.3845%" height="15" fill="rgb(209,150,17)" fg:x="6102" fg:w="105"/><text x="80.7089%" y="191.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (105 samples, 1.38%)</title><rect x="80.4589%" y="165" width="1.3845%" height="15" fill="rgb(234,202,34)" fg:x="6102" fg:w="105"/><text x="80.7089%" y="175.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,Type&gt;::keys (28 samples, 0.37%)</title><rect x="81.8434%" y="181" width="0.3692%" height="15" fill="rgb(253,148,53)" fg:x="6207" fg:w="28"/><text x="82.0934%" y="191.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for u16&gt;::cmp (41 samples, 0.54%)</title><rect x="82.2126%" y="181" width="0.5406%" height="15" fill="rgb(218,129,16)" fg:x="6235" fg:w="41"/><text x="82.4626%" y="191.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (827 samples, 10.90%)</title><rect x="76.6350%" y="229" width="10.9045%" height="15" fill="rgb(216,85,19)" fg:x="5812" fg:w="827"/><text x="76.8850%" y="239.50">alloc::collectio..</text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (744 samples, 9.81%)</title><rect x="77.7294%" y="213" width="9.8101%" height="15" fill="rgb(235,228,7)" fg:x="5895" fg:w="744"/><text x="77.9794%" y="223.50">alloc::collect..</text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (744 samples, 9.81%)</title><rect x="77.7294%" y="197" width="9.8101%" height="15" fill="rgb(245,175,0)" fg:x="5895" fg:w="744"/><text x="77.9794%" y="207.50">alloc::collect..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for u32&gt;::cmp (363 samples, 4.79%)</title><rect x="82.7532%" y="181" width="4.7864%" height="15" fill="rgb(208,168,36)" fg:x="6276" fg:w="363"/><text x="83.0032%" y="191.50">core::..</text></g><g><title>core::option::Option&lt;T&gt;::as_mut (20 samples, 0.26%)</title><rect x="87.5396%" y="229" width="0.2637%" height="15" fill="rgb(246,171,24)" fg:x="6639" fg:w="20"/><text x="87.7896%" y="239.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::get_mut (863 samples, 11.38%)</title><rect x="76.6218%" y="245" width="11.3792%" height="15" fill="rgb(215,142,24)" fg:x="5811" fg:w="863"/><text x="76.8718%" y="255.50">alloc::collection..</text></g><g><title>k_coding_test::engine::Engine::process (15 samples, 0.20%)</title><rect x="87.8033%" y="229" width="0.1978%" height="15" fill="rgb(250,187,7)" fg:x="6659" fg:w="15"/><text x="88.0533%" y="239.50"></text></g><g><title>k_coding_test::engine::db::client::ClientAccountState::add (8 samples, 0.11%)</title><rect x="88.0011%" y="245" width="0.1055%" height="15" fill="rgb(228,66,33)" fg:x="6674" fg:w="8"/><text x="88.2511%" y="255.50"></text></g><g><title>k_coding_test::engine::db::client::ClientAccountState::available (8 samples, 0.11%)</title><rect x="88.1065%" y="245" width="0.1055%" height="15" fill="rgb(234,215,21)" fg:x="6682" fg:w="8"/><text x="88.3565%" y="255.50"></text></g><g><title>k_coding_test::engine::Engine::update_client_db (1,009 samples, 13.30%)</title><rect x="74.9868%" y="261" width="13.3043%" height="15" fill="rgb(222,191,20)" fg:x="5687" fg:w="1009"/><text x="75.2368%" y="271.50">k_coding_test::engin..</text></g><g><title>k_coding_test::engine::db::client::ClientAccountState::sub (6 samples, 0.08%)</title><rect x="88.2120%" y="245" width="0.0791%" height="15" fill="rgb(245,79,54)" fg:x="6690" fg:w="6"/><text x="88.4620%" y="255.50"></text></g><g><title>&lt;k_coding_test::engine::protocol::TransactionKind as core::cmp::PartialEq&gt;::eq (4 samples, 0.05%)</title><rect x="88.2911%" y="245" width="0.0527%" height="15" fill="rgb(240,10,37)" fg:x="6696" fg:w="4"/><text x="88.5411%" y="255.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,Type&gt;::borrow_mut (1 samples, 0.01%)</title><rect x="88.3439%" y="229" width="0.0132%" height="15" fill="rgb(214,192,32)" fg:x="6700" fg:w="1"/><text x="88.5939%" y="239.50"></text></g><g><title>core::ptr::read (7 samples, 0.09%)</title><rect x="88.4362%" y="165" width="0.0923%" height="15" fill="rgb(209,36,54)" fg:x="6707" fg:w="7"/><text x="88.6862%" y="175.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::Internal&gt;,alloc::collections::btree::node::marker::Edge&gt;::descend (12 samples, 0.16%)</title><rect x="88.4362%" y="213" width="0.1582%" height="15" fill="rgb(220,10,11)" fg:x="6707" fg:w="12"/><text x="88.6862%" y="223.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init_read (12 samples, 0.16%)</title><rect x="88.4362%" y="197" width="0.1582%" height="15" fill="rgb(221,106,17)" fg:x="6707" fg:w="12"/><text x="88.6862%" y="207.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::read (12 samples, 0.16%)</title><rect x="88.4362%" y="181" width="0.1582%" height="15" fill="rgb(251,142,44)" fg:x="6707" fg:w="12"/><text x="88.6862%" y="191.50"></text></g><g><title>k_coding_test::engine::Engine::process (5 samples, 0.07%)</title><rect x="88.5285%" y="165" width="0.0659%" height="15" fill="rgb(238,13,15)" fg:x="6714" fg:w="5"/><text x="88.7785%" y="175.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;,Type&gt;::force (3 samples, 0.04%)</title><rect x="88.5944%" y="213" width="0.0396%" height="15" fill="rgb(208,107,27)" fg:x="6719" fg:w="3"/><text x="88.8444%" y="223.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::force (3 samples, 0.04%)</title><rect x="88.5944%" y="197" width="0.0396%" height="15" fill="rgb(205,136,37)" fg:x="6719" fg:w="3"/><text x="88.8444%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (23 samples, 0.30%)</title><rect x="89.2273%" y="181" width="0.3033%" height="15" fill="rgb(250,205,27)" fg:x="6767" fg:w="23"/><text x="89.4773%" y="191.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (23 samples, 0.30%)</title><rect x="89.2273%" y="165" width="0.3033%" height="15" fill="rgb(210,80,43)" fg:x="6767" fg:w="23"/><text x="89.4773%" y="175.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,Type&gt;::keys (7 samples, 0.09%)</title><rect x="89.5306%" y="181" width="0.0923%" height="15" fill="rgb(247,160,36)" fg:x="6790" fg:w="7"/><text x="89.7806%" y="191.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (196 samples, 2.58%)</title><rect x="88.3571%" y="229" width="2.5844%" height="15" fill="rgb(234,13,49)" fg:x="6701" fg:w="196"/><text x="88.6071%" y="239.50">al..</text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (175 samples, 2.31%)</title><rect x="88.6340%" y="213" width="2.3075%" height="15" fill="rgb(234,122,0)" fg:x="6722" fg:w="175"/><text x="88.8840%" y="223.50">a..</text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (175 samples, 2.31%)</title><rect x="88.6340%" y="197" width="2.3075%" height="15" fill="rgb(207,146,38)" fg:x="6722" fg:w="175"/><text x="88.8840%" y="207.50">a..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for u32&gt;::cmp (100 samples, 1.32%)</title><rect x="89.6229%" y="181" width="1.3186%" height="15" fill="rgb(207,177,25)" fg:x="6797" fg:w="100"/><text x="89.8729%" y="191.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (5 samples, 0.07%)</title><rect x="90.8755%" y="165" width="0.0659%" height="15" fill="rgb(211,178,42)" fg:x="6892" fg:w="5"/><text x="91.1255%" y="175.50"></text></g><g><title>irqentry_exit_to_user_mode (5 samples, 0.07%)</title><rect x="90.8755%" y="149" width="0.0659%" height="15" fill="rgb(230,69,54)" fg:x="6892" fg:w="5"/><text x="91.1255%" y="159.50"></text></g><g><title>exit_to_user_mode_prepare (5 samples, 0.07%)</title><rect x="90.8755%" y="133" width="0.0659%" height="15" fill="rgb(214,135,41)" fg:x="6892" fg:w="5"/><text x="91.1255%" y="143.50"></text></g><g><title>schedule (5 samples, 0.07%)</title><rect x="90.8755%" y="117" width="0.0659%" height="15" fill="rgb(237,67,25)" fg:x="6892" fg:w="5"/><text x="91.1255%" y="127.50"></text></g><g><title>__schedule (5 samples, 0.07%)</title><rect x="90.8755%" y="101" width="0.0659%" height="15" fill="rgb(222,189,50)" fg:x="6892" fg:w="5"/><text x="91.1255%" y="111.50"></text></g><g><title>finish_task_switch (5 samples, 0.07%)</title><rect x="90.8755%" y="85" width="0.0659%" height="15" fill="rgb(245,148,34)" fg:x="6892" fg:w="5"/><text x="91.1255%" y="95.50"></text></g><g><title>__perf_event_task_sched_in (5 samples, 0.07%)</title><rect x="90.8755%" y="69" width="0.0659%" height="15" fill="rgb(222,29,6)" fg:x="6892" fg:w="5"/><text x="91.1255%" y="79.50"></text></g><g><title>__intel_pmu_enable_all.constprop.0 (5 samples, 0.07%)</title><rect x="90.8755%" y="53" width="0.0659%" height="15" fill="rgb(221,189,43)" fg:x="6892" fg:w="5"/><text x="91.1255%" y="63.50"></text></g><g><title>native_write_msr (5 samples, 0.07%)</title><rect x="90.8755%" y="37" width="0.0659%" height="15" fill="rgb(207,36,27)" fg:x="6892" fg:w="5"/><text x="91.1255%" y="47.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_mut (1 samples, 0.01%)</title><rect x="90.9415%" y="229" width="0.0132%" height="15" fill="rgb(217,90,24)" fg:x="6897" fg:w="1"/><text x="91.1915%" y="239.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::get_mut (205 samples, 2.70%)</title><rect x="88.3439%" y="245" width="2.7031%" height="15" fill="rgb(224,66,35)" fg:x="6700" fg:w="205"/><text x="88.5939%" y="255.50">al..</text></g><g><title>k_coding_test::engine::Engine::process (7 samples, 0.09%)</title><rect x="90.9546%" y="229" width="0.0923%" height="15" fill="rgb(221,13,50)" fg:x="6898" fg:w="7"/><text x="91.2046%" y="239.50"></text></g><g><title>k_coding_test::engine::Engine::process (2 samples, 0.03%)</title><rect x="91.0469%" y="245" width="0.0264%" height="15" fill="rgb(236,68,49)" fg:x="6905" fg:w="2"/><text x="91.2969%" y="255.50"></text></g><g><title>k_coding_test::engine::Engine::process (1,402 samples, 18.49%)</title><rect x="72.7321%" y="293" width="18.4863%" height="15" fill="rgb(229,146,28)" fg:x="5516" fg:w="1402"/><text x="72.9821%" y="303.50">k_coding_test::engine::Engine..</text></g><g><title>k_coding_test::engine::Engine::process_record (1,373 samples, 18.10%)</title><rect x="73.1145%" y="277" width="18.1039%" height="15" fill="rgb(225,31,38)" fg:x="5545" fg:w="1373"/><text x="73.3645%" y="287.50">k_coding_test::engine::Engin..</text></g><g><title>k_coding_test::engine::Engine::update_transaction_db (222 samples, 2.93%)</title><rect x="88.2911%" y="261" width="2.9272%" height="15" fill="rgb(250,208,3)" fg:x="6696" fg:w="222"/><text x="88.5411%" y="271.50">k_..</text></g><g><title>k_coding_test::engine::protocol::Transaction::from_record (11 samples, 0.15%)</title><rect x="91.0733%" y="245" width="0.1450%" height="15" fill="rgb(246,54,23)" fg:x="6907" fg:w="11"/><text x="91.3233%" y="255.50"></text></g><g><title>k_coding_test::engine::protocol::TransactionKind::new (132 samples, 1.74%)</title><rect x="91.2184%" y="293" width="1.7405%" height="15" fill="rgb(243,76,11)" fg:x="6918" fg:w="132"/><text x="91.4684%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (29 samples, 0.38%)</title><rect x="94.6598%" y="213" width="0.3824%" height="15" fill="rgb(245,21,50)" fg:x="7179" fg:w="29"/><text x="94.9098%" y="223.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (29 samples, 0.38%)</title><rect x="94.6598%" y="197" width="0.3824%" height="15" fill="rgb(228,9,43)" fg:x="7179" fg:w="29"/><text x="94.9098%" y="207.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (29 samples, 0.38%)</title><rect x="94.6598%" y="181" width="0.3824%" height="15" fill="rgb(208,100,47)" fg:x="7179" fg:w="29"/><text x="94.9098%" y="191.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (2 samples, 0.03%)</title><rect x="95.0158%" y="165" width="0.0264%" height="15" fill="rgb(232,26,8)" fg:x="7206" fg:w="2"/><text x="95.2658%" y="175.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (2 samples, 0.03%)</title><rect x="95.0158%" y="149" width="0.0264%" height="15" fill="rgb(216,166,38)" fg:x="7206" fg:w="2"/><text x="95.2658%" y="159.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (2 samples, 0.03%)</title><rect x="95.0158%" y="133" width="0.0264%" height="15" fill="rgb(251,202,51)" fg:x="7206" fg:w="2"/><text x="95.2658%" y="143.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (31 samples, 0.41%)</title><rect x="94.6598%" y="245" width="0.4088%" height="15" fill="rgb(254,216,34)" fg:x="7179" fg:w="31"/><text x="94.9098%" y="255.50"></text></g><g><title>csv::byte_record::ByteRecord::get::{{closure}} (31 samples, 0.41%)</title><rect x="94.6598%" y="229" width="0.4088%" height="15" fill="rgb(251,32,27)" fg:x="7179" fg:w="31"/><text x="94.9098%" y="239.50"></text></g><g><title>k_coding_test::engine::record::Record::from_byterecord (2 samples, 0.03%)</title><rect x="95.0422%" y="213" width="0.0264%" height="15" fill="rgb(208,127,28)" fg:x="7208" fg:w="2"/><text x="95.2922%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.01%)</title><rect x="96.2421%" y="229" width="0.0132%" height="15" fill="rgb(224,137,22)" fg:x="7299" fg:w="1"/><text x="96.4921%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (1 samples, 0.01%)</title><rect x="96.2421%" y="213" width="0.0132%" height="15" fill="rgb(254,70,32)" fg:x="7299" fg:w="1"/><text x="96.4921%" y="223.50"></text></g><g><title>csv::byte_record::Bounds::get (95 samples, 1.25%)</title><rect x="95.0686%" y="245" width="1.2526%" height="15" fill="rgb(229,75,37)" fg:x="7210" fg:w="95"/><text x="95.3186%" y="255.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (5 samples, 0.07%)</title><rect x="96.2553%" y="229" width="0.0659%" height="15" fill="rgb(252,64,23)" fg:x="7300" fg:w="5"/><text x="96.5053%" y="239.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (5 samples, 0.07%)</title><rect x="96.2553%" y="213" width="0.0659%" height="15" fill="rgb(232,162,48)" fg:x="7300" fg:w="5"/><text x="96.5053%" y="223.50"></text></g><g><title>&lt;csv::byte_record::ByteRecord as core::ops::index::Index&lt;usize&gt;&gt;::index (147 samples, 1.94%)</title><rect x="94.4357%" y="277" width="1.9383%" height="15" fill="rgb(246,160,12)" fg:x="7162" fg:w="147"/><text x="94.6857%" y="287.50">&lt;..</text></g><g><title>csv::byte_record::ByteRecord::get (147 samples, 1.94%)</title><rect x="94.4357%" y="261" width="1.9383%" height="15" fill="rgb(247,166,0)" fg:x="7162" fg:w="147"/><text x="94.6857%" y="271.50">c..</text></g><g><title>k_coding_test::engine::record::Record::from_byterecord (4 samples, 0.05%)</title><rect x="96.3212%" y="245" width="0.0527%" height="15" fill="rgb(249,219,21)" fg:x="7305" fg:w="4"/><text x="96.5712%" y="255.50"></text></g><g><title>k_coding_test::engine::record::parse_unchecked (6 samples, 0.08%)</title><rect x="96.3739%" y="277" width="0.0791%" height="15" fill="rgb(205,209,3)" fg:x="7309" fg:w="6"/><text x="96.6239%" y="287.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (6 samples, 0.08%)</title><rect x="96.3739%" y="261" width="0.0791%" height="15" fill="rgb(243,44,1)" fg:x="7309" fg:w="6"/><text x="96.6239%" y="271.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap_or_default (3 samples, 0.04%)</title><rect x="96.4531%" y="261" width="0.0396%" height="15" fill="rgb(206,159,16)" fg:x="7315" fg:w="3"/><text x="96.7031%" y="271.50"></text></g><g><title>core::num::dec2flt::dec2flt (101 samples, 1.33%)</title><rect x="96.4926%" y="229" width="1.3318%" height="15" fill="rgb(244,77,30)" fg:x="7318" fg:w="101"/><text x="96.7426%" y="239.50"></text></g><g><title>k_coding_test::engine::record::Record::from_byterecord (373 samples, 4.92%)</title><rect x="92.9589%" y="293" width="4.9182%" height="15" fill="rgb(218,69,12)" fg:x="7050" fg:w="373"/><text x="93.2089%" y="303.50">k_codi..</text></g><g><title>k_coding_test::engine::record::parse_unchecked_f32 (108 samples, 1.42%)</title><rect x="96.4531%" y="277" width="1.4241%" height="15" fill="rgb(212,87,7)" fg:x="7315" fg:w="108"/><text x="96.7031%" y="287.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (105 samples, 1.38%)</title><rect x="96.4926%" y="261" width="1.3845%" height="15" fill="rgb(245,114,25)" fg:x="7318" fg:w="105"/><text x="96.7426%" y="271.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f32&gt;::from_str (105 samples, 1.38%)</title><rect x="96.4926%" y="245" width="1.3845%" height="15" fill="rgb(210,61,42)" fg:x="7318" fg:w="105"/><text x="96.7426%" y="255.50"></text></g><g><title>k_coding_test::engine::record::Record::from_byterecord (4 samples, 0.05%)</title><rect x="97.8244%" y="229" width="0.0527%" height="15" fill="rgb(211,52,33)" fg:x="7419" fg:w="4"/><text x="98.0744%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::rev::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.04%)</title><rect x="98.6023%" y="277" width="0.0396%" height="15" fill="rgb(234,58,33)" fg:x="7478" fg:w="3"/><text x="98.8523%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (3 samples, 0.04%)</title><rect x="98.6023%" y="261" width="0.0396%" height="15" fill="rgb(220,115,36)" fg:x="7478" fg:w="3"/><text x="98.8523%" y="271.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (3 samples, 0.04%)</title><rect x="98.6023%" y="245" width="0.0396%" height="15" fill="rgb(243,153,54)" fg:x="7478" fg:w="3"/><text x="98.8523%" y="255.50"></text></g><g><title>&lt;regex_automata::dense_imp::PremultipliedByteClass&lt;T,S&gt; as regex_automata::dfa::DFA&gt;::is_anchored (17 samples, 0.22%)</title><rect x="98.6419%" y="277" width="0.2242%" height="15" fill="rgb(251,47,18)" fg:x="7481" fg:w="17"/><text x="98.8919%" y="287.50"></text></g><g><title>regex_automata::dense_imp::Repr&lt;T,S&gt;::is_anchored (17 samples, 0.22%)</title><rect x="98.6419%" y="261" width="0.2242%" height="15" fill="rgb(242,102,42)" fg:x="7481" fg:w="17"/><text x="98.8919%" y="271.50"></text></g><g><title>&lt;regex_automata::dense_imp::PremultipliedByteClass&lt;T,S&gt; as regex_automata::dfa::DFA&gt;::is_dead_state (18 samples, 0.24%)</title><rect x="98.8660%" y="277" width="0.2373%" height="15" fill="rgb(234,31,38)" fg:x="7498" fg:w="18"/><text x="99.1160%" y="287.50"></text></g><g><title>regex_automata::dense_imp::Repr&lt;T,S&gt;::is_dead_state (18 samples, 0.24%)</title><rect x="98.8660%" y="261" width="0.2373%" height="15" fill="rgb(221,117,51)" fg:x="7498" fg:w="18"/><text x="99.1160%" y="271.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u16&gt;::eq (18 samples, 0.24%)</title><rect x="98.8660%" y="245" width="0.2373%" height="15" fill="rgb(212,20,18)" fg:x="7498" fg:w="18"/><text x="99.1160%" y="255.50"></text></g><g><title>&lt;regex_automata::dense_imp::PremultipliedByteClass&lt;T,S&gt; as regex_automata::dfa::DFA&gt;::is_match_or_dead_state (15 samples, 0.20%)</title><rect x="99.1034%" y="277" width="0.1978%" height="15" fill="rgb(245,133,36)" fg:x="7516" fg:w="15"/><text x="99.3534%" y="287.50"></text></g><g><title>regex_automata::dense_imp::Repr&lt;T,S&gt;::is_match_or_dead_state (15 samples, 0.20%)</title><rect x="99.1034%" y="261" width="0.1978%" height="15" fill="rgb(212,6,19)" fg:x="7516" fg:w="15"/><text x="99.3534%" y="271.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for u16&gt;::le (15 samples, 0.20%)</title><rect x="99.1034%" y="245" width="0.1978%" height="15" fill="rgb(218,1,36)" fg:x="7516" fg:w="15"/><text x="99.3534%" y="255.50"></text></g><g><title>&lt;regex_automata::dense_imp::PremultipliedByteClass&lt;T,S&gt; as regex_automata::dfa::DFA&gt;::is_match_state (25 samples, 0.33%)</title><rect x="99.3012%" y="277" width="0.3296%" height="15" fill="rgb(246,84,54)" fg:x="7531" fg:w="25"/><text x="99.5512%" y="287.50"></text></g><g><title>regex_automata::dense_imp::Repr&lt;T,S&gt;::is_match_state (25 samples, 0.33%)</title><rect x="99.3012%" y="261" width="0.3296%" height="15" fill="rgb(242,110,6)" fg:x="7531" fg:w="25"/><text x="99.5512%" y="271.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for u16&gt;::le (25 samples, 0.33%)</title><rect x="99.3012%" y="245" width="0.3296%" height="15" fill="rgb(214,47,5)" fg:x="7531" fg:w="25"/><text x="99.5512%" y="255.50"></text></g><g><title>&lt;u16 as regex_automata::state_id::StateID&gt;::to_usize (1 samples, 0.01%)</title><rect x="99.7363%" y="261" width="0.0132%" height="15" fill="rgb(218,159,25)" fg:x="7564" fg:w="1"/><text x="99.9863%" y="271.50"></text></g><g><title>&lt;regex_automata::dense_imp::PremultipliedByteClass&lt;T,S&gt; as regex_automata::dfa::DFA&gt;::next_state_unchecked (18 samples, 0.24%)</title><rect x="99.6308%" y="277" width="0.2373%" height="15" fill="rgb(215,211,28)" fg:x="7556" fg:w="18"/><text x="99.8808%" y="287.50"></text></g><g><title>regex_automata::classes::ByteClasses::get_unchecked (9 samples, 0.12%)</title><rect x="99.7495%" y="261" width="0.1187%" height="15" fill="rgb(238,59,32)" fg:x="7565" fg:w="9"/><text x="99.9995%" y="271.50"></text></g><g><title>regex_automata::dfa::DFA::rfind_at (155 samples, 2.04%)</title><rect x="97.8771%" y="293" width="2.0438%" height="15" fill="rgb(226,82,3)" fg:x="7423" fg:w="155"/><text x="98.1271%" y="303.50">r..</text></g><g><title>&lt;regex_automata::dense_imp::PremultipliedByteClass&lt;T,S&gt; as regex_automata::dfa::DFA&gt;::start_state (4 samples, 0.05%)</title><rect x="99.8681%" y="277" width="0.0527%" height="15" fill="rgb(240,164,32)" fg:x="7574" fg:w="4"/><text x="100.1181%" y="287.50"></text></g><g><title>k-coding-test (7,579 samples, 99.93%)</title><rect x="0.0000%" y="309" width="99.9341%" height="15" fill="rgb(232,46,7)" fg:x="0" fg:w="7579"/><text x="0.2500%" y="319.50">k-coding-test</text></g><g><title>sysmalloc (1 samples, 0.01%)</title><rect x="99.9209%" y="293" width="0.0132%" height="15" fill="rgb(229,129,53)" fg:x="7578" fg:w="1"/><text x="100.1709%" y="303.50"></text></g><g><title>asm_exc_page_fault (1 samples, 0.01%)</title><rect x="99.9209%" y="277" width="0.0132%" height="15" fill="rgb(234,188,29)" fg:x="7578" fg:w="1"/><text x="100.1709%" y="287.50"></text></g><g><title>exc_page_fault (1 samples, 0.01%)</title><rect x="99.9209%" y="261" width="0.0132%" height="15" fill="rgb(246,141,4)" fg:x="7578" fg:w="1"/><text x="100.1709%" y="271.50"></text></g><g><title>do_user_addr_fault (1 samples, 0.01%)</title><rect x="99.9209%" y="245" width="0.0132%" height="15" fill="rgb(229,23,39)" fg:x="7578" fg:w="1"/><text x="100.1709%" y="255.50"></text></g><g><title>handle_mm_fault (1 samples, 0.01%)</title><rect x="99.9209%" y="229" width="0.0132%" height="15" fill="rgb(206,12,3)" fg:x="7578" fg:w="1"/><text x="100.1709%" y="239.50"></text></g><g><title>page_add_new_anon_rmap (1 samples, 0.01%)</title><rect x="99.9209%" y="213" width="0.0132%" height="15" fill="rgb(252,226,20)" fg:x="7578" fg:w="1"/><text x="100.1709%" y="223.50"></text></g><g><title>__mod_lruvec_state (1 samples, 0.01%)</title><rect x="99.9209%" y="197" width="0.0132%" height="15" fill="rgb(216,123,35)" fg:x="7578" fg:w="1"/><text x="100.1709%" y="207.50"></text></g><g><title>__mod_node_page_state (1 samples, 0.01%)</title><rect x="99.9209%" y="181" width="0.0132%" height="15" fill="rgb(212,68,40)" fg:x="7578" fg:w="1"/><text x="100.1709%" y="191.50"></text></g><g><title>all (7,584 samples, 100%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(254,125,32)" fg:x="0" fg:w="7584"/><text x="0.2500%" y="335.50"></text></g><g><title>perf-exec (5 samples, 0.07%)</title><rect x="99.9341%" y="309" width="0.0659%" height="15" fill="rgb(253,97,22)" fg:x="7579" fg:w="5"/><text x="100.1841%" y="319.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (5 samples, 0.07%)</title><rect x="99.9341%" y="293" width="0.0659%" height="15" fill="rgb(241,101,14)" fg:x="7579" fg:w="5"/><text x="100.1841%" y="303.50"></text></g><g><title>do_syscall_64 (5 samples, 0.07%)</title><rect x="99.9341%" y="277" width="0.0659%" height="15" fill="rgb(238,103,29)" fg:x="7579" fg:w="5"/><text x="100.1841%" y="287.50"></text></g><g><title>__x64_sys_execve (5 samples, 0.07%)</title><rect x="99.9341%" y="261" width="0.0659%" height="15" fill="rgb(233,195,47)" fg:x="7579" fg:w="5"/><text x="100.1841%" y="271.50"></text></g><g><title>do_execveat_common.isra.0 (5 samples, 0.07%)</title><rect x="99.9341%" y="245" width="0.0659%" height="15" fill="rgb(246,218,30)" fg:x="7579" fg:w="5"/><text x="100.1841%" y="255.50"></text></g><g><title>bprm_execve (5 samples, 0.07%)</title><rect x="99.9341%" y="229" width="0.0659%" height="15" fill="rgb(219,145,47)" fg:x="7579" fg:w="5"/><text x="100.1841%" y="239.50"></text></g><g><title>load_elf_binary (5 samples, 0.07%)</title><rect x="99.9341%" y="213" width="0.0659%" height="15" fill="rgb(243,12,26)" fg:x="7579" fg:w="5"/><text x="100.1841%" y="223.50"></text></g><g><title>begin_new_exec (5 samples, 0.07%)</title><rect x="99.9341%" y="197" width="0.0659%" height="15" fill="rgb(214,87,16)" fg:x="7579" fg:w="5"/><text x="100.1841%" y="207.50"></text></g><g><title>perf_event_exec (5 samples, 0.07%)</title><rect x="99.9341%" y="181" width="0.0659%" height="15" fill="rgb(208,99,42)" fg:x="7579" fg:w="5"/><text x="100.1841%" y="191.50"></text></g><g><title>__intel_pmu_enable_all.constprop.0 (5 samples, 0.07%)</title><rect x="99.9341%" y="165" width="0.0659%" height="15" fill="rgb(253,99,2)" fg:x="7579" fg:w="5"/><text x="100.1841%" y="175.50"></text></g><g><title>native_write_msr (5 samples, 0.07%)</title><rect x="99.9341%" y="149" width="0.0659%" height="15" fill="rgb(220,168,23)" fg:x="7579" fg:w="5"/><text x="100.1841%" y="159.50"></text></g></svg></svg>